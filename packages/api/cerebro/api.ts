/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AcceptTermsInput
 */
export interface AcceptTermsInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof AcceptTermsInput
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface AddOrganizationsInput
 */
export interface AddOrganizationsInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof AddOrganizationsInput
     */
    'user_id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddOrganizationsInput
     */
    'organizations': Array<string>;
}
/**
 * 
 * @export
 * @interface AddScopesInput
 */
export interface AddScopesInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof AddScopesInput
     */
    'user_id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddScopesInput
     */
    'scopes': Array<string>;
}
/**
 * 
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Application
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof Application
     */
    'is_active': boolean;
}
/**
 * 
 * @export
 * @interface ApplicationInput
 */
export interface ApplicationInput {
    /**
     * 
     * @type {string}
     * @memberof ApplicationInput
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInput
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationInput
     */
    'is_active': boolean;
}
/**
 * 
 * @export
 * @interface BaseCondensedScope
 */
export interface BaseCondensedScope {
    /**
     * 
     * @type {string}
     * @memberof BaseCondensedScope
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BaseCondensedScope
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof BaseCondensedScope
     */
    'is_active': boolean;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof BaseCondensedScope
     */
    'resource_id': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof BaseCondensedScope
     */
    'application_id': string;
}
/**
 * 
 * @export
 * @interface BulkGetUserInput
 */
export interface BulkGetUserInput {
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkGetUserInput
     */
    'user_ids': Array<string>;
}
/**
 * 
 * @export
 * @interface ChangePasswordInput
 */
export interface ChangePasswordInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof ChangePasswordInput
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordInput
     */
    'old_password': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordInput
     */
    'new_password': string;
}
/**
 * 
 * @export
 * @interface CondensedScope
 */
export interface CondensedScope {
    /**
     * 
     * @type {string}
     * @memberof CondensedScope
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CondensedScope
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof CondensedScope
     */
    'is_active': boolean;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof CondensedScope
     */
    'resource_id': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof CondensedScope
     */
    'application_id': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof CondensedScope
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CondensedScope
     */
    'scope': string;
}
/**
 * 
 * @export
 * @interface CreatePasswordlessUserInput
 */
export interface CreatePasswordlessUserInput {
    /**
     * 
     * @type {string}
     * @memberof CreatePasswordlessUserInput
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface GetUserOutput
 */
export interface GetUserOutput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof GetUserOutput
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserOutput
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserOutput
     */
    'is_active': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserOutput
     */
    'is_premium'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserOutput
     */
    'is_admin'?: boolean;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ListUserOutput
 */
export interface ListUserOutput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof ListUserOutput
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ListUserOutput
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof ListUserOutput
     */
    'is_active': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListUserOutput
     */
    'is_premium'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListUserOutput
     */
    'is_admin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ListUserOutput
     */
    'terms_accepted'?: boolean;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Organization
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    'is_active': boolean;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface OrganizationInput
 */
export interface OrganizationInput {
    /**
     * 
     * @type {string}
     * @memberof OrganizationInput
     */
    'name': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const Platform = {
    Android: 'android',
    Ios: 'ios'
} as const;

export type Platform = typeof Platform[keyof typeof Platform];


/**
 * 
 * @export
 * @interface RefreshAccessTokenInput
 */
export interface RefreshAccessTokenInput {
    /**
     * 
     * @type {string}
     * @memberof RefreshAccessTokenInput
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Resource
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof Resource
     */
    'is_active': boolean;
}
/**
 * 
 * @export
 * @interface ResourceInput
 */
export interface ResourceInput {
    /**
     * 
     * @type {string}
     * @memberof ResourceInput
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ResourceInput
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof ResourceInput
     */
    'is_active': boolean;
}
/**
 * 
 * @export
 * @interface Scope
 */
export interface Scope {
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof Scope
     */
    'is_active': boolean;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Scope
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    'scope'?: string;
    /**
     * 
     * @type {Resource}
     * @memberof Scope
     */
    'resource': Resource;
    /**
     * 
     * @type {Application}
     * @memberof Scope
     */
    'application': Application;
}
/**
 * 
 * @export
 * @interface ScopelessUser
 */
export interface ScopelessUser {
    /**
     * 
     * @type {string}
     * @memberof ScopelessUser
     */
    'email': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof ScopelessUser
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof ScopelessUser
     */
    'is_active': boolean;
}
/**
 * 
 * @export
 * @interface SingleFactorSignInInput
 */
export interface SingleFactorSignInInput {
    /**
     * 
     * @type {string}
     * @memberof SingleFactorSignInInput
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof SingleFactorSignInInput
     */
    'terms_accepted'?: boolean;
}
/**
 * 
 * @export
 * @interface TokenInput
 */
export interface TokenInput {
    /**
     * 
     * @type {string}
     * @memberof TokenInput
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof TokenInput
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface TokenOutput
 */
export interface TokenOutput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof TokenOutput
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof TokenOutput
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof TokenOutput
     */
    'refresh_token': string;
    /**
     * 
     * @type {string}
     * @memberof TokenOutput
     */
    'token_type': string;
}
/**
 * 
 * @export
 * @interface UpdateUserInput
 */
export interface UpdateUserInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof UpdateUserInput
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInput
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserInput
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserInput
     */
    'is_admin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserInput
     */
    'is_premium'?: boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_active': boolean;
    /**
     * 
     * @type {Array<Scope>}
     * @memberof User
     */
    'scopes': Array<Scope>;
    /**
     * 
     * @type {Array<Organization>}
     * @memberof User
     */
    'organizations': Array<Organization>;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_admin': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_premium': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'terms_accepted': boolean;
}
/**
 * 
 * @export
 * @interface UserCreateInput
 */
export interface UserCreateInput {
    /**
     * 
     * @type {string}
     * @memberof UserCreateInput
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateInput
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface VerificationCodeInput
 */
export interface VerificationCodeInput {
    /**
     * 
     * @type {string}
     * @memberof VerificationCodeInput
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof VerificationCodeInput
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Version
     */
    'id'?: string;
    /**
     * 
     * @type {Platform}
     * @memberof Version
     */
    'platform': Platform;
    /**
     * 
     * @type {string}
     * @memberof Version
     */
    'version': string;
}


/**
 * 
 * @export
 * @interface VersionInput
 */
export interface VersionInput {
    /**
     * 
     * @type {Platform}
     * @memberof VersionInput
     */
    'platform': Platform;
    /**
     * 
     * @type {string}
     * @memberof VersionInput
     */
    'version': string;
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Application
         * @param {ApplicationInput} applicationInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicationAuthApplicationsPost: async (applicationInput: ApplicationInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationInput' is not null or undefined
            assertParamExists('createApplicationAuthApplicationsPost', 'applicationInput', applicationInput)
            const localVarPath = `/auth/applications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Resource
         * @param {ResourceInput} resourceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceAuthResourcesPost: async (resourceInput: ResourceInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceInput' is not null or undefined
            assertParamExists('createResourceAuthResourcesPost', 'resourceInput', resourceInput)
            const localVarPath = `/auth/resources/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Scope
         * @param {BaseCondensedScope} baseCondensedScope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScopeAuthScopesPost: async (baseCondensedScope: BaseCondensedScope, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseCondensedScope' is not null or undefined
            assertParamExists('createScopeAuthScopesPost', 'baseCondensedScope', baseCondensedScope)
            const localVarPath = `/auth/scopes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseCondensedScope, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Application
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationAuthApplicationsApplicationIdDelete: async (applicationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('deleteApplicationAuthApplicationsApplicationIdDelete', 'applicationId', applicationId)
            const localVarPath = `/auth/applications/{application_id}`
                .replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsAuthApplicationsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/applications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcesAuthResourcesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/resources/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Scopes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopesAuthScopesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/scopes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Application
         * @param {ApplicationInput} applicationInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApplicationAuthApplicationsPost(applicationInput: ApplicationInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApplicationAuthApplicationsPost(applicationInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.createApplicationAuthApplicationsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Resource
         * @param {ResourceInput} resourceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceAuthResourcesPost(resourceInput: ResourceInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceAuthResourcesPost(resourceInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.createResourceAuthResourcesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Scope
         * @param {BaseCondensedScope} baseCondensedScope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScopeAuthScopesPost(baseCondensedScope: BaseCondensedScope, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CondensedScope>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScopeAuthScopesPost(baseCondensedScope, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.createScopeAuthScopesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Application
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplicationAuthApplicationsApplicationIdDelete(applicationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApplicationAuthApplicationsApplicationIdDelete(applicationId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.deleteApplicationAuthApplicationsApplicationIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationsAuthApplicationsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Application>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationsAuthApplicationsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.getApplicationsAuthApplicationsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourcesAuthResourcesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Resource>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourcesAuthResourcesGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.getResourcesAuthResourcesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Scopes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScopesAuthScopesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScopesAuthScopesGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.getScopesAuthScopesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Application
         * @param {AuthApiCreateApplicationAuthApplicationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicationAuthApplicationsPost(requestParameters: AuthApiCreateApplicationAuthApplicationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Application> {
            return localVarFp.createApplicationAuthApplicationsPost(requestParameters.applicationInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Resource
         * @param {AuthApiCreateResourceAuthResourcesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceAuthResourcesPost(requestParameters: AuthApiCreateResourceAuthResourcesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Resource> {
            return localVarFp.createResourceAuthResourcesPost(requestParameters.resourceInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Scope
         * @param {AuthApiCreateScopeAuthScopesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScopeAuthScopesPost(requestParameters: AuthApiCreateScopeAuthScopesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CondensedScope> {
            return localVarFp.createScopeAuthScopesPost(requestParameters.baseCondensedScope, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Application
         * @param {AuthApiDeleteApplicationAuthApplicationsApplicationIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationAuthApplicationsApplicationIdDelete(requestParameters: AuthApiDeleteApplicationAuthApplicationsApplicationIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Application> {
            return localVarFp.deleteApplicationAuthApplicationsApplicationIdDelete(requestParameters.applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationsAuthApplicationsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Application>> {
            return localVarFp.getApplicationsAuthApplicationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcesAuthResourcesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Resource>> {
            return localVarFp.getResourcesAuthResourcesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Scopes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopesAuthScopesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Scope>> {
            return localVarFp.getScopesAuthScopesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createApplicationAuthApplicationsPost operation in AuthApi.
 * @export
 * @interface AuthApiCreateApplicationAuthApplicationsPostRequest
 */
export interface AuthApiCreateApplicationAuthApplicationsPostRequest {
    /**
     * 
     * @type {ApplicationInput}
     * @memberof AuthApiCreateApplicationAuthApplicationsPost
     */
    readonly applicationInput: ApplicationInput
}

/**
 * Request parameters for createResourceAuthResourcesPost operation in AuthApi.
 * @export
 * @interface AuthApiCreateResourceAuthResourcesPostRequest
 */
export interface AuthApiCreateResourceAuthResourcesPostRequest {
    /**
     * 
     * @type {ResourceInput}
     * @memberof AuthApiCreateResourceAuthResourcesPost
     */
    readonly resourceInput: ResourceInput
}

/**
 * Request parameters for createScopeAuthScopesPost operation in AuthApi.
 * @export
 * @interface AuthApiCreateScopeAuthScopesPostRequest
 */
export interface AuthApiCreateScopeAuthScopesPostRequest {
    /**
     * 
     * @type {BaseCondensedScope}
     * @memberof AuthApiCreateScopeAuthScopesPost
     */
    readonly baseCondensedScope: BaseCondensedScope
}

/**
 * Request parameters for deleteApplicationAuthApplicationsApplicationIdDelete operation in AuthApi.
 * @export
 * @interface AuthApiDeleteApplicationAuthApplicationsApplicationIdDeleteRequest
 */
export interface AuthApiDeleteApplicationAuthApplicationsApplicationIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthApiDeleteApplicationAuthApplicationsApplicationIdDelete
     */
    readonly applicationId: string
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Create Application
     * @param {AuthApiCreateApplicationAuthApplicationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createApplicationAuthApplicationsPost(requestParameters: AuthApiCreateApplicationAuthApplicationsPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).createApplicationAuthApplicationsPost(requestParameters.applicationInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Resource
     * @param {AuthApiCreateResourceAuthResourcesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createResourceAuthResourcesPost(requestParameters: AuthApiCreateResourceAuthResourcesPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).createResourceAuthResourcesPost(requestParameters.resourceInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Scope
     * @param {AuthApiCreateScopeAuthScopesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createScopeAuthScopesPost(requestParameters: AuthApiCreateScopeAuthScopesPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).createScopeAuthScopesPost(requestParameters.baseCondensedScope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Application
     * @param {AuthApiDeleteApplicationAuthApplicationsApplicationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public deleteApplicationAuthApplicationsApplicationIdDelete(requestParameters: AuthApiDeleteApplicationAuthApplicationsApplicationIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).deleteApplicationAuthApplicationsApplicationIdDelete(requestParameters.applicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getApplicationsAuthApplicationsGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getApplicationsAuthApplicationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Resources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getResourcesAuthResourcesGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getResourcesAuthResourcesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Scopes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getScopesAuthScopesGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getScopesAuthScopesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Organization
         * @param {OrganizationInput} organizationInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationOrganizationsPost: async (organizationInput: OrganizationInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationInput' is not null or undefined
            assertParamExists('createOrganizationOrganizationsPost', 'organizationInput', organizationInput)
            const localVarPath = `/organizations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Organization
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationOrganizationsDelete: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('deleteOrganizationOrganizationsDelete', 'organizationId', organizationId)
            const localVarPath = `/organizations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Organizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationsOrganizationsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Organization
         * @param {Organization} organization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationOrganizationsPut: async (organization: Organization, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('updateOrganizationOrganizationsPut', 'organization', organization)
            const localVarPath = `/organizations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Organization
         * @param {OrganizationInput} organizationInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganizationOrganizationsPost(organizationInput: OrganizationInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationOrganizationsPost(organizationInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationsApi.createOrganizationOrganizationsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Organization
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationOrganizationsDelete(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationOrganizationsDelete(organizationId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationsApi.deleteOrganizationOrganizationsDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Organizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizationsOrganizationsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationsOrganizationsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationsApi.listOrganizationsOrganizationsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Organization
         * @param {Organization} organization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationOrganizationsPut(organization: Organization, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationOrganizationsPut(organization, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationsApi.updateOrganizationOrganizationsPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Organization
         * @param {OrganizationsApiCreateOrganizationOrganizationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationOrganizationsPost(requestParameters: OrganizationsApiCreateOrganizationOrganizationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.createOrganizationOrganizationsPost(requestParameters.organizationInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Organization
         * @param {OrganizationsApiDeleteOrganizationOrganizationsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationOrganizationsDelete(requestParameters: OrganizationsApiDeleteOrganizationOrganizationsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.deleteOrganizationOrganizationsDelete(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Organizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationsOrganizationsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Organization>> {
            return localVarFp.listOrganizationsOrganizationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Organization
         * @param {OrganizationsApiUpdateOrganizationOrganizationsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationOrganizationsPut(requestParameters: OrganizationsApiUpdateOrganizationOrganizationsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.updateOrganizationOrganizationsPut(requestParameters.organization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOrganizationOrganizationsPost operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiCreateOrganizationOrganizationsPostRequest
 */
export interface OrganizationsApiCreateOrganizationOrganizationsPostRequest {
    /**
     * 
     * @type {OrganizationInput}
     * @memberof OrganizationsApiCreateOrganizationOrganizationsPost
     */
    readonly organizationInput: OrganizationInput
}

/**
 * Request parameters for deleteOrganizationOrganizationsDelete operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiDeleteOrganizationOrganizationsDeleteRequest
 */
export interface OrganizationsApiDeleteOrganizationOrganizationsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof OrganizationsApiDeleteOrganizationOrganizationsDelete
     */
    readonly organizationId: string
}

/**
 * Request parameters for updateOrganizationOrganizationsPut operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiUpdateOrganizationOrganizationsPutRequest
 */
export interface OrganizationsApiUpdateOrganizationOrganizationsPutRequest {
    /**
     * 
     * @type {Organization}
     * @memberof OrganizationsApiUpdateOrganizationOrganizationsPut
     */
    readonly organization: Organization
}

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * 
     * @summary Create Organization
     * @param {OrganizationsApiCreateOrganizationOrganizationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public createOrganizationOrganizationsPost(requestParameters: OrganizationsApiCreateOrganizationOrganizationsPostRequest, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).createOrganizationOrganizationsPost(requestParameters.organizationInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Organization
     * @param {OrganizationsApiDeleteOrganizationOrganizationsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public deleteOrganizationOrganizationsDelete(requestParameters: OrganizationsApiDeleteOrganizationOrganizationsDeleteRequest, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).deleteOrganizationOrganizationsDelete(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public listOrganizationsOrganizationsGet(options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).listOrganizationsOrganizationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Organization
     * @param {OrganizationsApiUpdateOrganizationOrganizationsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public updateOrganizationOrganizationsPut(requestParameters: OrganizationsApiUpdateOrganizationOrganizationsPutRequest, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).updateOrganizationOrganizationsPut(requestParameters.organization, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Organizations
         * @param {AddOrganizationsInput} addOrganizationsInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrganizationsProfilesAddOrganizationsPost: async (addOrganizationsInput: AddOrganizationsInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addOrganizationsInput' is not null or undefined
            assertParamExists('addOrganizationsProfilesAddOrganizationsPost', 'addOrganizationsInput', addOrganizationsInput)
            const localVarPath = `/profiles/add_organizations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addOrganizationsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Scopes
         * @param {AddScopesInput} addScopesInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addScopesProfilesAddScopesPost: async (addScopesInput: AddScopesInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addScopesInput' is not null or undefined
            assertParamExists('addScopesProfilesAddScopesPost', 'addScopesInput', addScopesInput)
            const localVarPath = `/profiles/add_scopes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addScopesInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bulk Get Profiles
         * @param {BulkGetUserInput} bulkGetUserInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetProfilesProfilesBulkGetPost: async (bulkGetUserInput: BulkGetUserInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkGetUserInput' is not null or undefined
            assertParamExists('bulkGetProfilesProfilesBulkGetPost', 'bulkGetUserInput', bulkGetUserInput)
            const localVarPath = `/profiles/bulk-get/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkGetUserInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change Password
         * @param {ChangePasswordInput} changePasswordInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordProfilesPasswordChangePut: async (changePasswordInput: ChangePasswordInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordInput' is not null or undefined
            assertParamExists('changePasswordProfilesPasswordChangePut', 'changePasswordInput', changePasswordInput)
            const localVarPath = `/profiles/password/change/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Passwordless User
         * @param {CreatePasswordlessUserInput} createPasswordlessUserInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordlessUserProfilesCreatePasswordlessUserPost: async (createPasswordlessUserInput: CreatePasswordlessUserInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPasswordlessUserInput' is not null or undefined
            assertParamExists('createPasswordlessUserProfilesCreatePasswordlessUserPost', 'createPasswordlessUserInput', createPasswordlessUserInput)
            const localVarPath = `/profiles/create-passwordless-user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPasswordlessUserInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreateInput} userCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserProfilesPost: async (userCreateInput: UserCreateInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateInput' is not null or undefined
            assertParamExists('createUserProfilesPost', 'userCreateInput', userCreateInput)
            const localVarPath = `/profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserProfilesDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserProfilesDelete', 'id', id)
            const localVarPath = `/profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User By Email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByEmailProfilesEmailsEmailGet: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getUserByEmailProfilesEmailsEmailGet', 'email', email)
            const localVarPath = `/profiles/emails/{email}/`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User By Id
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdProfilesUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserByIdProfilesUserIdGet', 'userId', userId)
            const localVarPath = `/profiles/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersProfilesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Scopes
         * @param {AddScopesInput} addScopesInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeScopesProfilesRemoveScopesPost: async (addScopesInput: AddScopesInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addScopesInput' is not null or undefined
            assertParamExists('removeScopesProfilesRemoveScopesPost', 'addScopesInput', addScopesInput)
            const localVarPath = `/profiles/remove_scopes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addScopesInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User
         * @param {UpdateUserInput} updateUserInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfilesPut: async (updateUserInput: UpdateUserInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserInput' is not null or undefined
            assertParamExists('updateUserProfilesPut', 'updateUserInput', updateUserInput)
            const localVarPath = `/profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Organizations
         * @param {AddOrganizationsInput} addOrganizationsInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrganizationsProfilesAddOrganizationsPost(addOrganizationsInput: AddOrganizationsInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrganizationsProfilesAddOrganizationsPost(addOrganizationsInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.addOrganizationsProfilesAddOrganizationsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Add Scopes
         * @param {AddScopesInput} addScopesInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addScopesProfilesAddScopesPost(addScopesInput: AddScopesInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addScopesProfilesAddScopesPost(addScopesInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.addScopesProfilesAddScopesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Bulk Get Profiles
         * @param {BulkGetUserInput} bulkGetUserInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkGetProfilesProfilesBulkGetPost(bulkGetUserInput: BulkGetUserInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkGetProfilesProfilesBulkGetPost(bulkGetUserInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.bulkGetProfilesProfilesBulkGetPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Change Password
         * @param {ChangePasswordInput} changePasswordInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePasswordProfilesPasswordChangePut(changePasswordInput: ChangePasswordInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePasswordProfilesPasswordChangePut(changePasswordInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.changePasswordProfilesPasswordChangePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Passwordless User
         * @param {CreatePasswordlessUserInput} createPasswordlessUserInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPasswordlessUserProfilesCreatePasswordlessUserPost(createPasswordlessUserInput: CreatePasswordlessUserInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScopelessUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPasswordlessUserProfilesCreatePasswordlessUserPost(createPasswordlessUserInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.createPasswordlessUserProfilesCreatePasswordlessUserPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreateInput} userCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserProfilesPost(userCreateInput: UserCreateInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScopelessUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserProfilesPost(userCreateInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.createUserProfilesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserProfilesDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserProfilesDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.deleteUserProfilesDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get User By Email
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByEmailProfilesEmailsEmailGet(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByEmailProfilesEmailsEmailGet(email, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.getUserByEmailProfilesEmailsEmailGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get User By Id
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByIdProfilesUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByIdProfilesUserIdGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.getUserByIdProfilesUserIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsersProfilesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListUserOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsersProfilesGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.listUsersProfilesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Scopes
         * @param {AddScopesInput} addScopesInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeScopesProfilesRemoveScopesPost(addScopesInput: AddScopesInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeScopesProfilesRemoveScopesPost(addScopesInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.removeScopesProfilesRemoveScopesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update User
         * @param {UpdateUserInput} updateUserInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProfilesPut(updateUserInput: UpdateUserInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserProfilesPut(updateUserInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.updateUserProfilesPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfilesApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Organizations
         * @param {ProfilesApiAddOrganizationsProfilesAddOrganizationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrganizationsProfilesAddOrganizationsPost(requestParameters: ProfilesApiAddOrganizationsProfilesAddOrganizationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.addOrganizationsProfilesAddOrganizationsPost(requestParameters.addOrganizationsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Scopes
         * @param {ProfilesApiAddScopesProfilesAddScopesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addScopesProfilesAddScopesPost(requestParameters: ProfilesApiAddScopesProfilesAddScopesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.addScopesProfilesAddScopesPost(requestParameters.addScopesInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bulk Get Profiles
         * @param {ProfilesApiBulkGetProfilesProfilesBulkGetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetProfilesProfilesBulkGetPost(requestParameters: ProfilesApiBulkGetProfilesProfilesBulkGetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetUserOutput>> {
            return localVarFp.bulkGetProfilesProfilesBulkGetPost(requestParameters.bulkGetUserInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change Password
         * @param {ProfilesApiChangePasswordProfilesPasswordChangePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordProfilesPasswordChangePut(requestParameters: ProfilesApiChangePasswordProfilesPasswordChangePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.changePasswordProfilesPasswordChangePut(requestParameters.changePasswordInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Passwordless User
         * @param {ProfilesApiCreatePasswordlessUserProfilesCreatePasswordlessUserPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordlessUserProfilesCreatePasswordlessUserPost(requestParameters: ProfilesApiCreatePasswordlessUserProfilesCreatePasswordlessUserPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ScopelessUser> {
            return localVarFp.createPasswordlessUserProfilesCreatePasswordlessUserPost(requestParameters.createPasswordlessUserInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create User
         * @param {ProfilesApiCreateUserProfilesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserProfilesPost(requestParameters: ProfilesApiCreateUserProfilesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ScopelessUser> {
            return localVarFp.createUserProfilesPost(requestParameters.userCreateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User
         * @param {ProfilesApiDeleteUserProfilesDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserProfilesDelete(requestParameters: ProfilesApiDeleteUserProfilesDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.deleteUserProfilesDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User By Email
         * @param {ProfilesApiGetUserByEmailProfilesEmailsEmailGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByEmailProfilesEmailsEmailGet(requestParameters: ProfilesApiGetUserByEmailProfilesEmailsEmailGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetUserOutput> {
            return localVarFp.getUserByEmailProfilesEmailsEmailGet(requestParameters.email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User By Id
         * @param {ProfilesApiGetUserByIdProfilesUserIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdProfilesUserIdGet(requestParameters: ProfilesApiGetUserByIdProfilesUserIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetUserOutput> {
            return localVarFp.getUserByIdProfilesUserIdGet(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersProfilesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ListUserOutput>> {
            return localVarFp.listUsersProfilesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Scopes
         * @param {ProfilesApiRemoveScopesProfilesRemoveScopesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeScopesProfilesRemoveScopesPost(requestParameters: ProfilesApiRemoveScopesProfilesRemoveScopesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.removeScopesProfilesRemoveScopesPost(requestParameters.addScopesInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User
         * @param {ProfilesApiUpdateUserProfilesPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfilesPut(requestParameters: ProfilesApiUpdateUserProfilesPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.updateUserProfilesPut(requestParameters.updateUserInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addOrganizationsProfilesAddOrganizationsPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiAddOrganizationsProfilesAddOrganizationsPostRequest
 */
export interface ProfilesApiAddOrganizationsProfilesAddOrganizationsPostRequest {
    /**
     * 
     * @type {AddOrganizationsInput}
     * @memberof ProfilesApiAddOrganizationsProfilesAddOrganizationsPost
     */
    readonly addOrganizationsInput: AddOrganizationsInput
}

/**
 * Request parameters for addScopesProfilesAddScopesPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiAddScopesProfilesAddScopesPostRequest
 */
export interface ProfilesApiAddScopesProfilesAddScopesPostRequest {
    /**
     * 
     * @type {AddScopesInput}
     * @memberof ProfilesApiAddScopesProfilesAddScopesPost
     */
    readonly addScopesInput: AddScopesInput
}

/**
 * Request parameters for bulkGetProfilesProfilesBulkGetPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiBulkGetProfilesProfilesBulkGetPostRequest
 */
export interface ProfilesApiBulkGetProfilesProfilesBulkGetPostRequest {
    /**
     * 
     * @type {BulkGetUserInput}
     * @memberof ProfilesApiBulkGetProfilesProfilesBulkGetPost
     */
    readonly bulkGetUserInput: BulkGetUserInput
}

/**
 * Request parameters for changePasswordProfilesPasswordChangePut operation in ProfilesApi.
 * @export
 * @interface ProfilesApiChangePasswordProfilesPasswordChangePutRequest
 */
export interface ProfilesApiChangePasswordProfilesPasswordChangePutRequest {
    /**
     * 
     * @type {ChangePasswordInput}
     * @memberof ProfilesApiChangePasswordProfilesPasswordChangePut
     */
    readonly changePasswordInput: ChangePasswordInput
}

/**
 * Request parameters for createPasswordlessUserProfilesCreatePasswordlessUserPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiCreatePasswordlessUserProfilesCreatePasswordlessUserPostRequest
 */
export interface ProfilesApiCreatePasswordlessUserProfilesCreatePasswordlessUserPostRequest {
    /**
     * 
     * @type {CreatePasswordlessUserInput}
     * @memberof ProfilesApiCreatePasswordlessUserProfilesCreatePasswordlessUserPost
     */
    readonly createPasswordlessUserInput: CreatePasswordlessUserInput
}

/**
 * Request parameters for createUserProfilesPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiCreateUserProfilesPostRequest
 */
export interface ProfilesApiCreateUserProfilesPostRequest {
    /**
     * 
     * @type {UserCreateInput}
     * @memberof ProfilesApiCreateUserProfilesPost
     */
    readonly userCreateInput: UserCreateInput
}

/**
 * Request parameters for deleteUserProfilesDelete operation in ProfilesApi.
 * @export
 * @interface ProfilesApiDeleteUserProfilesDeleteRequest
 */
export interface ProfilesApiDeleteUserProfilesDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiDeleteUserProfilesDelete
     */
    readonly id: string
}

/**
 * Request parameters for getUserByEmailProfilesEmailsEmailGet operation in ProfilesApi.
 * @export
 * @interface ProfilesApiGetUserByEmailProfilesEmailsEmailGetRequest
 */
export interface ProfilesApiGetUserByEmailProfilesEmailsEmailGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiGetUserByEmailProfilesEmailsEmailGet
     */
    readonly email: string
}

/**
 * Request parameters for getUserByIdProfilesUserIdGet operation in ProfilesApi.
 * @export
 * @interface ProfilesApiGetUserByIdProfilesUserIdGetRequest
 */
export interface ProfilesApiGetUserByIdProfilesUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiGetUserByIdProfilesUserIdGet
     */
    readonly userId: string
}

/**
 * Request parameters for removeScopesProfilesRemoveScopesPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiRemoveScopesProfilesRemoveScopesPostRequest
 */
export interface ProfilesApiRemoveScopesProfilesRemoveScopesPostRequest {
    /**
     * 
     * @type {AddScopesInput}
     * @memberof ProfilesApiRemoveScopesProfilesRemoveScopesPost
     */
    readonly addScopesInput: AddScopesInput
}

/**
 * Request parameters for updateUserProfilesPut operation in ProfilesApi.
 * @export
 * @interface ProfilesApiUpdateUserProfilesPutRequest
 */
export interface ProfilesApiUpdateUserProfilesPutRequest {
    /**
     * 
     * @type {UpdateUserInput}
     * @memberof ProfilesApiUpdateUserProfilesPut
     */
    readonly updateUserInput: UpdateUserInput
}

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     * 
     * @summary Add Organizations
     * @param {ProfilesApiAddOrganizationsProfilesAddOrganizationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public addOrganizationsProfilesAddOrganizationsPost(requestParameters: ProfilesApiAddOrganizationsProfilesAddOrganizationsPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).addOrganizationsProfilesAddOrganizationsPost(requestParameters.addOrganizationsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Scopes
     * @param {ProfilesApiAddScopesProfilesAddScopesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public addScopesProfilesAddScopesPost(requestParameters: ProfilesApiAddScopesProfilesAddScopesPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).addScopesProfilesAddScopesPost(requestParameters.addScopesInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bulk Get Profiles
     * @param {ProfilesApiBulkGetProfilesProfilesBulkGetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public bulkGetProfilesProfilesBulkGetPost(requestParameters: ProfilesApiBulkGetProfilesProfilesBulkGetPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).bulkGetProfilesProfilesBulkGetPost(requestParameters.bulkGetUserInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change Password
     * @param {ProfilesApiChangePasswordProfilesPasswordChangePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public changePasswordProfilesPasswordChangePut(requestParameters: ProfilesApiChangePasswordProfilesPasswordChangePutRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).changePasswordProfilesPasswordChangePut(requestParameters.changePasswordInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Passwordless User
     * @param {ProfilesApiCreatePasswordlessUserProfilesCreatePasswordlessUserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public createPasswordlessUserProfilesCreatePasswordlessUserPost(requestParameters: ProfilesApiCreatePasswordlessUserProfilesCreatePasswordlessUserPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).createPasswordlessUserProfilesCreatePasswordlessUserPost(requestParameters.createPasswordlessUserInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create User
     * @param {ProfilesApiCreateUserProfilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public createUserProfilesPost(requestParameters: ProfilesApiCreateUserProfilesPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).createUserProfilesPost(requestParameters.userCreateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User
     * @param {ProfilesApiDeleteUserProfilesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public deleteUserProfilesDelete(requestParameters: ProfilesApiDeleteUserProfilesDeleteRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).deleteUserProfilesDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User By Email
     * @param {ProfilesApiGetUserByEmailProfilesEmailsEmailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public getUserByEmailProfilesEmailsEmailGet(requestParameters: ProfilesApiGetUserByEmailProfilesEmailsEmailGetRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).getUserByEmailProfilesEmailsEmailGet(requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User By Id
     * @param {ProfilesApiGetUserByIdProfilesUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public getUserByIdProfilesUserIdGet(requestParameters: ProfilesApiGetUserByIdProfilesUserIdGetRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).getUserByIdProfilesUserIdGet(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public listUsersProfilesGet(options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).listUsersProfilesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Scopes
     * @param {ProfilesApiRemoveScopesProfilesRemoveScopesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public removeScopesProfilesRemoveScopesPost(requestParameters: ProfilesApiRemoveScopesProfilesRemoveScopesPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).removeScopesProfilesRemoveScopesPost(requestParameters.addScopesInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User
     * @param {ProfilesApiUpdateUserProfilesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public updateUserProfilesPut(requestParameters: ProfilesApiUpdateUserProfilesPutRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).updateUserProfilesPut(requestParameters.updateUserInput, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Health check endpoint for AWS load balancers and monitoring
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Health check endpoint for AWS load balancers and monitoring
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckHealthGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SystemApi.healthCheckHealthGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * Health check endpoint for AWS load balancers and monitoring
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Health check endpoint for AWS load balancers and monitoring
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public healthCheckHealthGet(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TokensApi - axios parameter creator
 * @export
 */
export const TokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept terms of service (one-way operation from False to True)
         * @summary Accept Terms
         * @param {AcceptTermsInput} acceptTermsInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptTermsTokensAcceptTermsPost: async (acceptTermsInput: AcceptTermsInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'acceptTermsInput' is not null or undefined
            assertParamExists('acceptTermsTokensAcceptTermsPost', 'acceptTermsInput', acceptTermsInput)
            const localVarPath = `/tokens/accept-terms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acceptTermsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Api Login For Access Token
         * @param {TokenInput} tokenInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginForAccessTokenTokensApiPost: async (tokenInput: TokenInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenInput' is not null or undefined
            assertParamExists('apiLoginForAccessTokenTokensApiPost', 'tokenInput', tokenInput)
            const localVarPath = `/tokens/api/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForAccessTokenTokensPost: async (username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginForAccessTokenTokensPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginForAccessTokenTokensPost', 'password', password)
            const localVarPath = `/tokens/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Access Token
         * @param {RefreshAccessTokenInput} refreshAccessTokenInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessTokenTokensRefreshPost: async (refreshAccessTokenInput: RefreshAccessTokenInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshAccessTokenInput' is not null or undefined
            assertParamExists('refreshAccessTokenTokensRefreshPost', 'refreshAccessTokenInput', refreshAccessTokenInput)
            const localVarPath = `/tokens/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshAccessTokenInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Service Account Login For Access Token
         * @param {TokenInput} tokenInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceAccountLoginForAccessTokenTokensApiServiceAccountsPost: async (tokenInput: TokenInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenInput' is not null or undefined
            assertParamExists('serviceAccountLoginForAccessTokenTokensApiServiceAccountsPost', 'tokenInput', tokenInput)
            const localVarPath = `/tokens/api/service-accounts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Single Factor Code Validation
         * @param {VerificationCodeInput} verificationCodeInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleFactorCodeValidationTokensSignInSingleFactorValidateCodePost: async (verificationCodeInput: VerificationCodeInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationCodeInput' is not null or undefined
            assertParamExists('singleFactorCodeValidationTokensSignInSingleFactorValidateCodePost', 'verificationCodeInput', verificationCodeInput)
            const localVarPath = `/tokens/sign-in/single-factor/validate-code/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verificationCodeInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Single Factor Sign In
         * @param {SingleFactorSignInInput} singleFactorSignInInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleFactorSignInTokensSignInSingleFactorPost: async (singleFactorSignInInput: SingleFactorSignInInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'singleFactorSignInInput' is not null or undefined
            assertParamExists('singleFactorSignInTokensSignInSingleFactorPost', 'singleFactorSignInInput', singleFactorSignInInput)
            const localVarPath = `/tokens/sign-in/single-factor/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(singleFactorSignInInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Single Factor Token Validation
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('singleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost', 'token', token)
            const localVarPath = `/tokens/sign-in/single-factor/validate-token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokensApi - functional programming interface
 * @export
 */
export const TokensApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokensApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept terms of service (one-way operation from False to True)
         * @summary Accept Terms
         * @param {AcceptTermsInput} acceptTermsInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptTermsTokensAcceptTermsPost(acceptTermsInput: AcceptTermsInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptTermsTokensAcceptTermsPost(acceptTermsInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokensApi.acceptTermsTokensAcceptTermsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Api Login For Access Token
         * @param {TokenInput} tokenInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginForAccessTokenTokensApiPost(tokenInput: TokenInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginForAccessTokenTokensApiPost(tokenInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokensApi.apiLoginForAccessTokenTokensApiPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginForAccessTokenTokensPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginForAccessTokenTokensPost(username, password, grantType, scope, clientId, clientSecret, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokensApi.loginForAccessTokenTokensPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Refresh Access Token
         * @param {RefreshAccessTokenInput} refreshAccessTokenInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshAccessTokenTokensRefreshPost(refreshAccessTokenInput: RefreshAccessTokenInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshAccessTokenTokensRefreshPost(refreshAccessTokenInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokensApi.refreshAccessTokenTokensRefreshPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Service Account Login For Access Token
         * @param {TokenInput} tokenInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceAccountLoginForAccessTokenTokensApiServiceAccountsPost(tokenInput: TokenInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceAccountLoginForAccessTokenTokensApiServiceAccountsPost(tokenInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokensApi.serviceAccountLoginForAccessTokenTokensApiServiceAccountsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Single Factor Code Validation
         * @param {VerificationCodeInput} verificationCodeInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleFactorCodeValidationTokensSignInSingleFactorValidateCodePost(verificationCodeInput: VerificationCodeInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singleFactorCodeValidationTokensSignInSingleFactorValidateCodePost(verificationCodeInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokensApi.singleFactorCodeValidationTokensSignInSingleFactorValidateCodePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Single Factor Sign In
         * @param {SingleFactorSignInInput} singleFactorSignInInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleFactorSignInTokensSignInSingleFactorPost(singleFactorSignInInput: SingleFactorSignInInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singleFactorSignInTokensSignInSingleFactorPost(singleFactorSignInInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokensApi.singleFactorSignInTokensSignInSingleFactorPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Single Factor Token Validation
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.singleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost(token, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokensApi.singleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TokensApi - factory interface
 * @export
 */
export const TokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokensApiFp(configuration)
    return {
        /**
         * Accept terms of service (one-way operation from False to True)
         * @summary Accept Terms
         * @param {TokensApiAcceptTermsTokensAcceptTermsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptTermsTokensAcceptTermsPost(requestParameters: TokensApiAcceptTermsTokensAcceptTermsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenOutput> {
            return localVarFp.acceptTermsTokensAcceptTermsPost(requestParameters.acceptTermsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Api Login For Access Token
         * @param {TokensApiApiLoginForAccessTokenTokensApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginForAccessTokenTokensApiPost(requestParameters: TokensApiApiLoginForAccessTokenTokensApiPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenOutput> {
            return localVarFp.apiLoginForAccessTokenTokensApiPost(requestParameters.tokenInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {TokensApiLoginForAccessTokenTokensPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForAccessTokenTokensPost(requestParameters: TokensApiLoginForAccessTokenTokensPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenOutput> {
            return localVarFp.loginForAccessTokenTokensPost(requestParameters.username, requestParameters.password, requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Access Token
         * @param {TokensApiRefreshAccessTokenTokensRefreshPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessTokenTokensRefreshPost(requestParameters: TokensApiRefreshAccessTokenTokensRefreshPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenOutput> {
            return localVarFp.refreshAccessTokenTokensRefreshPost(requestParameters.refreshAccessTokenInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Service Account Login For Access Token
         * @param {TokensApiServiceAccountLoginForAccessTokenTokensApiServiceAccountsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceAccountLoginForAccessTokenTokensApiServiceAccountsPost(requestParameters: TokensApiServiceAccountLoginForAccessTokenTokensApiServiceAccountsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenOutput> {
            return localVarFp.serviceAccountLoginForAccessTokenTokensApiServiceAccountsPost(requestParameters.tokenInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Single Factor Code Validation
         * @param {TokensApiSingleFactorCodeValidationTokensSignInSingleFactorValidateCodePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleFactorCodeValidationTokensSignInSingleFactorValidateCodePost(requestParameters: TokensApiSingleFactorCodeValidationTokensSignInSingleFactorValidateCodePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenOutput> {
            return localVarFp.singleFactorCodeValidationTokensSignInSingleFactorValidateCodePost(requestParameters.verificationCodeInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Single Factor Sign In
         * @param {TokensApiSingleFactorSignInTokensSignInSingleFactorPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleFactorSignInTokensSignInSingleFactorPost(requestParameters: TokensApiSingleFactorSignInTokensSignInSingleFactorPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.singleFactorSignInTokensSignInSingleFactorPost(requestParameters.singleFactorSignInInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Single Factor Token Validation
         * @param {TokensApiSingleFactorTokenValidationTokensSignInSingleFactorValidateTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost(requestParameters: TokensApiSingleFactorTokenValidationTokensSignInSingleFactorValidateTokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenOutput> {
            return localVarFp.singleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost(requestParameters.token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acceptTermsTokensAcceptTermsPost operation in TokensApi.
 * @export
 * @interface TokensApiAcceptTermsTokensAcceptTermsPostRequest
 */
export interface TokensApiAcceptTermsTokensAcceptTermsPostRequest {
    /**
     * 
     * @type {AcceptTermsInput}
     * @memberof TokensApiAcceptTermsTokensAcceptTermsPost
     */
    readonly acceptTermsInput: AcceptTermsInput
}

/**
 * Request parameters for apiLoginForAccessTokenTokensApiPost operation in TokensApi.
 * @export
 * @interface TokensApiApiLoginForAccessTokenTokensApiPostRequest
 */
export interface TokensApiApiLoginForAccessTokenTokensApiPostRequest {
    /**
     * 
     * @type {TokenInput}
     * @memberof TokensApiApiLoginForAccessTokenTokensApiPost
     */
    readonly tokenInput: TokenInput
}

/**
 * Request parameters for loginForAccessTokenTokensPost operation in TokensApi.
 * @export
 * @interface TokensApiLoginForAccessTokenTokensPostRequest
 */
export interface TokensApiLoginForAccessTokenTokensPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TokensApiLoginForAccessTokenTokensPost
     */
    readonly username: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiLoginForAccessTokenTokensPost
     */
    readonly password: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiLoginForAccessTokenTokensPost
     */
    readonly grantType?: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiLoginForAccessTokenTokensPost
     */
    readonly scope?: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiLoginForAccessTokenTokensPost
     */
    readonly clientId?: string

    /**
     * 
     * @type {string}
     * @memberof TokensApiLoginForAccessTokenTokensPost
     */
    readonly clientSecret?: string
}

/**
 * Request parameters for refreshAccessTokenTokensRefreshPost operation in TokensApi.
 * @export
 * @interface TokensApiRefreshAccessTokenTokensRefreshPostRequest
 */
export interface TokensApiRefreshAccessTokenTokensRefreshPostRequest {
    /**
     * 
     * @type {RefreshAccessTokenInput}
     * @memberof TokensApiRefreshAccessTokenTokensRefreshPost
     */
    readonly refreshAccessTokenInput: RefreshAccessTokenInput
}

/**
 * Request parameters for serviceAccountLoginForAccessTokenTokensApiServiceAccountsPost operation in TokensApi.
 * @export
 * @interface TokensApiServiceAccountLoginForAccessTokenTokensApiServiceAccountsPostRequest
 */
export interface TokensApiServiceAccountLoginForAccessTokenTokensApiServiceAccountsPostRequest {
    /**
     * 
     * @type {TokenInput}
     * @memberof TokensApiServiceAccountLoginForAccessTokenTokensApiServiceAccountsPost
     */
    readonly tokenInput: TokenInput
}

/**
 * Request parameters for singleFactorCodeValidationTokensSignInSingleFactorValidateCodePost operation in TokensApi.
 * @export
 * @interface TokensApiSingleFactorCodeValidationTokensSignInSingleFactorValidateCodePostRequest
 */
export interface TokensApiSingleFactorCodeValidationTokensSignInSingleFactorValidateCodePostRequest {
    /**
     * 
     * @type {VerificationCodeInput}
     * @memberof TokensApiSingleFactorCodeValidationTokensSignInSingleFactorValidateCodePost
     */
    readonly verificationCodeInput: VerificationCodeInput
}

/**
 * Request parameters for singleFactorSignInTokensSignInSingleFactorPost operation in TokensApi.
 * @export
 * @interface TokensApiSingleFactorSignInTokensSignInSingleFactorPostRequest
 */
export interface TokensApiSingleFactorSignInTokensSignInSingleFactorPostRequest {
    /**
     * 
     * @type {SingleFactorSignInInput}
     * @memberof TokensApiSingleFactorSignInTokensSignInSingleFactorPost
     */
    readonly singleFactorSignInInput: SingleFactorSignInInput
}

/**
 * Request parameters for singleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost operation in TokensApi.
 * @export
 * @interface TokensApiSingleFactorTokenValidationTokensSignInSingleFactorValidateTokenPostRequest
 */
export interface TokensApiSingleFactorTokenValidationTokensSignInSingleFactorValidateTokenPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TokensApiSingleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost
     */
    readonly token: string
}

/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
export class TokensApi extends BaseAPI {
    /**
     * Accept terms of service (one-way operation from False to True)
     * @summary Accept Terms
     * @param {TokensApiAcceptTermsTokensAcceptTermsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public acceptTermsTokensAcceptTermsPost(requestParameters: TokensApiAcceptTermsTokensAcceptTermsPostRequest, options?: RawAxiosRequestConfig) {
        return TokensApiFp(this.configuration).acceptTermsTokensAcceptTermsPost(requestParameters.acceptTermsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Api Login For Access Token
     * @param {TokensApiApiLoginForAccessTokenTokensApiPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public apiLoginForAccessTokenTokensApiPost(requestParameters: TokensApiApiLoginForAccessTokenTokensApiPostRequest, options?: RawAxiosRequestConfig) {
        return TokensApiFp(this.configuration).apiLoginForAccessTokenTokensApiPost(requestParameters.tokenInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login For Access Token
     * @param {TokensApiLoginForAccessTokenTokensPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public loginForAccessTokenTokensPost(requestParameters: TokensApiLoginForAccessTokenTokensPostRequest, options?: RawAxiosRequestConfig) {
        return TokensApiFp(this.configuration).loginForAccessTokenTokensPost(requestParameters.username, requestParameters.password, requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Access Token
     * @param {TokensApiRefreshAccessTokenTokensRefreshPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public refreshAccessTokenTokensRefreshPost(requestParameters: TokensApiRefreshAccessTokenTokensRefreshPostRequest, options?: RawAxiosRequestConfig) {
        return TokensApiFp(this.configuration).refreshAccessTokenTokensRefreshPost(requestParameters.refreshAccessTokenInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Service Account Login For Access Token
     * @param {TokensApiServiceAccountLoginForAccessTokenTokensApiServiceAccountsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public serviceAccountLoginForAccessTokenTokensApiServiceAccountsPost(requestParameters: TokensApiServiceAccountLoginForAccessTokenTokensApiServiceAccountsPostRequest, options?: RawAxiosRequestConfig) {
        return TokensApiFp(this.configuration).serviceAccountLoginForAccessTokenTokensApiServiceAccountsPost(requestParameters.tokenInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Single Factor Code Validation
     * @param {TokensApiSingleFactorCodeValidationTokensSignInSingleFactorValidateCodePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public singleFactorCodeValidationTokensSignInSingleFactorValidateCodePost(requestParameters: TokensApiSingleFactorCodeValidationTokensSignInSingleFactorValidateCodePostRequest, options?: RawAxiosRequestConfig) {
        return TokensApiFp(this.configuration).singleFactorCodeValidationTokensSignInSingleFactorValidateCodePost(requestParameters.verificationCodeInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Single Factor Sign In
     * @param {TokensApiSingleFactorSignInTokensSignInSingleFactorPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public singleFactorSignInTokensSignInSingleFactorPost(requestParameters: TokensApiSingleFactorSignInTokensSignInSingleFactorPostRequest, options?: RawAxiosRequestConfig) {
        return TokensApiFp(this.configuration).singleFactorSignInTokensSignInSingleFactorPost(requestParameters.singleFactorSignInInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Single Factor Token Validation
     * @param {TokensApiSingleFactorTokenValidationTokensSignInSingleFactorValidateTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public singleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost(requestParameters: TokensApiSingleFactorTokenValidationTokensSignInSingleFactorValidateTokenPostRequest, options?: RawAxiosRequestConfig) {
        return TokensApiFp(this.configuration).singleFactorTokenValidationTokensSignInSingleFactorValidateTokenPost(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VersionsApi - axios parameter creator
 * @export
 */
export const VersionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Version
         * @param {VersionInput} versionInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVersionVersionsPost: async (versionInput: VersionInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionInput' is not null or undefined
            assertParamExists('createVersionVersionsPost', 'versionInput', versionInput)
            const localVarPath = `/versions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(versionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deprecate Version
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deprecateVersionVersionsDeprecateIdPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deprecateVersionVersionsDeprecateIdPost', 'id', id)
            const localVarPath = `/versions/deprecate/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Active Versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveVersionsVersionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/versions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionsApi - functional programming interface
 * @export
 */
export const VersionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VersionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Version
         * @param {VersionInput} versionInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVersionVersionsPost(versionInput: VersionInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVersionVersionsPost(versionInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['VersionsApi.createVersionVersionsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Deprecate Version
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deprecateVersionVersionsDeprecateIdPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deprecateVersionVersionsDeprecateIdPost(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['VersionsApi.deprecateVersionVersionsDeprecateIdPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Active Versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActiveVersionsVersionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Version>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActiveVersionsVersionsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['VersionsApi.listActiveVersionsVersionsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * VersionsApi - factory interface
 * @export
 */
export const VersionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VersionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Version
         * @param {VersionsApiCreateVersionVersionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVersionVersionsPost(requestParameters: VersionsApiCreateVersionVersionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Version> {
            return localVarFp.createVersionVersionsPost(requestParameters.versionInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deprecate Version
         * @param {VersionsApiDeprecateVersionVersionsDeprecateIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deprecateVersionVersionsDeprecateIdPost(requestParameters: VersionsApiDeprecateVersionVersionsDeprecateIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deprecateVersionVersionsDeprecateIdPost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Active Versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveVersionsVersionsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Version>> {
            return localVarFp.listActiveVersionsVersionsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVersionVersionsPost operation in VersionsApi.
 * @export
 * @interface VersionsApiCreateVersionVersionsPostRequest
 */
export interface VersionsApiCreateVersionVersionsPostRequest {
    /**
     * 
     * @type {VersionInput}
     * @memberof VersionsApiCreateVersionVersionsPost
     */
    readonly versionInput: VersionInput
}

/**
 * Request parameters for deprecateVersionVersionsDeprecateIdPost operation in VersionsApi.
 * @export
 * @interface VersionsApiDeprecateVersionVersionsDeprecateIdPostRequest
 */
export interface VersionsApiDeprecateVersionVersionsDeprecateIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof VersionsApiDeprecateVersionVersionsDeprecateIdPost
     */
    readonly id: string
}

/**
 * VersionsApi - object-oriented interface
 * @export
 * @class VersionsApi
 * @extends {BaseAPI}
 */
export class VersionsApi extends BaseAPI {
    /**
     * 
     * @summary Create Version
     * @param {VersionsApiCreateVersionVersionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionsApi
     */
    public createVersionVersionsPost(requestParameters: VersionsApiCreateVersionVersionsPostRequest, options?: RawAxiosRequestConfig) {
        return VersionsApiFp(this.configuration).createVersionVersionsPost(requestParameters.versionInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deprecate Version
     * @param {VersionsApiDeprecateVersionVersionsDeprecateIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionsApi
     */
    public deprecateVersionVersionsDeprecateIdPost(requestParameters: VersionsApiDeprecateVersionVersionsDeprecateIdPostRequest, options?: RawAxiosRequestConfig) {
        return VersionsApiFp(this.configuration).deprecateVersionVersionsDeprecateIdPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Active Versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionsApi
     */
    public listActiveVersionsVersionsGet(options?: RawAxiosRequestConfig) {
        return VersionsApiFp(this.configuration).listActiveVersionsVersionsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



