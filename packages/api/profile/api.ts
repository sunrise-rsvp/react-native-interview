/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BlockedUser
 */
export interface BlockedUser {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof BlockedUser
     */
    'id'?: string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof BlockedUser
     */
    'user_id': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof BlockedUser
     */
    'blocked_user_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof BlockedUser
     */
    'is_active'?: boolean;
}
/**
 * 
 * @export
 * @interface BlockedUserInput
 */
export interface BlockedUserInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof BlockedUserInput
     */
    'blocked_user_id': string;
}
/**
 * Paginator for blocked users that generates the correct pagination links for the /users/{user_id}/blocks/ endpoint.
 * @export
 * @interface BlockedUsersPaginatorBlockedUser
 */
export interface BlockedUsersPaginatorBlockedUser {
    /**
     * 
     * @type {number}
     * @memberof BlockedUsersPaginatorBlockedUser
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof BlockedUsersPaginatorBlockedUser
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof BlockedUsersPaginatorBlockedUser
     */
    'limit': number;
    /**
     * 
     * @type {Array<BlockedUser>}
     * @memberof BlockedUsersPaginatorBlockedUser
     */
    'results': Array<BlockedUser>;
    /**
     * 
     * @type {string}
     * @memberof BlockedUsersPaginatorBlockedUser
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockedUsersPaginatorBlockedUser
     */
    'previous'?: string;
}
/**
 * 
 * @export
 * @interface BulkGetProfilesInput
 */
export interface BulkGetProfilesInput {
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkGetProfilesInput
     */
    'user_ids': Array<string>;
}
/**
 * 
 * @export
 * @interface CreateProfileInput
 */
export interface CreateProfileInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof CreateProfileInput
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProfileInput
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProfileInput
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProfileInput
     */
    'headline': string;
    /**
     * 
     * @type {GenderPronouns}
     * @memberof CreateProfileInput
     */
    'pronouns'?: GenderPronouns;
}


/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const GenderPronouns = {
    HeHim: 'he/him',
    SheHer: 'she/her',
    TheyThem: 'they/them'
} as const;

export type GenderPronouns = typeof GenderPronouns[keyof typeof GenderPronouns];


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Output model for the is_user_blocked endpoint
 * @export
 * @interface IsBlockedOutput
 */
export interface IsBlockedOutput {
    /**
     * 
     * @type {boolean}
     * @memberof IsBlockedOutput
     */
    'is_blocked': boolean;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof IsBlockedOutput
     */
    'user_id': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof IsBlockedOutput
     */
    'blocked_user_id': string;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Profile
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'headline'?: string;
    /**
     * 
     * @type {GenderPronouns}
     * @memberof Profile
     */
    'pronouns'?: GenderPronouns;
    /**
     * 
     * @type {ProfileLinks}
     * @memberof Profile
     */
    'links'?: ProfileLinks;
    /**
     * 
     * @type {ProfilePhoto}
     * @memberof Profile
     */
    'photos'?: ProfilePhoto;
    /**
     * 
     * @type {ProfileVideo}
     * @memberof Profile
     */
    'videos'?: ProfileVideo;
    /**
     * 
     * @type {Array<BlockedUser>}
     * @memberof Profile
     */
    'blocked_users'?: Array<BlockedUser>;
    /**
     * 
     * @type {boolean}
     * @memberof Profile
     */
    'is_active'?: boolean;
}


/**
 * 
 * @export
 * @interface ProfileLinks
 */
export interface ProfileLinks {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof ProfileLinks
     */
    'id'?: string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof ProfileLinks
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProfileLinks
     */
    'linkedin'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileLinks
     */
    'github'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileLinks
     */
    'x'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileLinks
     */
    'website'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileLinks
     */
    'is_active'?: boolean;
}
/**
 * 
 * @export
 * @interface ProfilePhoto
 */
export interface ProfilePhoto {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof ProfilePhoto
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProfilePhoto
     */
    'thumbnail_small'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfilePhoto
     */
    'thumbnail_large'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfilePhoto
     */
    'small'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfilePhoto
     */
    'medium'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfilePhoto
     */
    'large'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProfilePhoto
     */
    'is_active'?: boolean;
}
/**
 * Custom paginator for profile search results that generates the correct pagination links for the /profiles/search/ endpoint.
 * @export
 * @interface ProfileSearchPaginatorProfile
 */
export interface ProfileSearchPaginatorProfile {
    /**
     * 
     * @type {number}
     * @memberof ProfileSearchPaginatorProfile
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof ProfileSearchPaginatorProfile
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof ProfileSearchPaginatorProfile
     */
    'limit': number;
    /**
     * 
     * @type {Array<Profile>}
     * @memberof ProfileSearchPaginatorProfile
     */
    'results': Array<Profile>;
    /**
     * 
     * @type {string}
     * @memberof ProfileSearchPaginatorProfile
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileSearchPaginatorProfile
     */
    'previous'?: string;
}
/**
 * 
 * @export
 * @interface ProfileVideo
 */
export interface ProfileVideo {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof ProfileVideo
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProfileVideo
     */
    'thumbnail_small'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileVideo
     */
    'thumbnail_large'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileVideo
     */
    'small'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileVideo
     */
    'medium'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileVideo
     */
    'large'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileVideo
     */
    'x_large'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileVideo
     */
    'original'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileVideo
     */
    'is_active'?: boolean;
}
/**
 * 
 * @export
 * @interface SearchProfilesInput
 */
export interface SearchProfilesInput {
    /**
     * Search term for matching against first and last names (minimum 3 characters)
     * @type {string}
     * @memberof SearchProfilesInput
     */
    'query': string;
    /**
     * Maximum number of results to return
     * @type {number}
     * @memberof SearchProfilesInput
     */
    'limit'?: number;
    /**
     * Offset for pagination
     * @type {number}
     * @memberof SearchProfilesInput
     */
    'offset'?: number;
}
/**
 * 
 * @export
 * @interface UpdateProfileInput
 */
export interface UpdateProfileInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof UpdateProfileInput
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileInput
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileInput
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileInput
     */
    'headline': string;
    /**
     * 
     * @type {GenderPronouns}
     * @memberof UpdateProfileInput
     */
    'pronouns'?: GenderPronouns;
}


/**
 * 
 * @export
 * @interface UpdateProfileLinksInput
 */
export interface UpdateProfileLinksInput {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileLinksInput
     */
    'linkedin'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileLinksInput
     */
    'github'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileLinksInput
     */
    'x'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileLinksInput
     */
    'website'?: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Block User
         * @param {string} userId 
         * @param {BlockedUserInput} blockedUserInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUserProfilesUsersUserIdBlocksPost: async (userId: string, blockedUserInput: BlockedUserInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('blockUserProfilesUsersUserIdBlocksPost', 'userId', userId)
            // verify required parameter 'blockedUserInput' is not null or undefined
            assertParamExists('blockUserProfilesUsersUserIdBlocksPost', 'blockedUserInput', blockedUserInput)
            const localVarPath = `/profiles/users/{user_id}/blocks/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blockedUserInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bulk Get Profile
         * @param {BulkGetProfilesInput} bulkGetProfilesInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetProfileProfilesUsersBulkPost: async (bulkGetProfilesInput: BulkGetProfilesInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkGetProfilesInput' is not null or undefined
            assertParamExists('bulkGetProfileProfilesUsersBulkPost', 'bulkGetProfilesInput', bulkGetProfilesInput)
            const localVarPath = `/profiles/users/bulk/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkGetProfilesInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check If Blocked
         * @param {string} userId 
         * @param {string} blockedUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet: async (userId: string, blockedUserId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet', 'userId', userId)
            // verify required parameter 'blockedUserId' is not null or undefined
            assertParamExists('checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet', 'blockedUserId', blockedUserId)
            const localVarPath = `/profiles/users/{user_id}/blocks/{blocked_user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"blocked_user_id"}}`, encodeURIComponent(String(blockedUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Profile
         * @param {CreateProfileInput} createProfileInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfileProfilesPost: async (createProfileInput: CreateProfileInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProfileInput' is not null or undefined
            assertParamExists('createProfileProfilesPost', 'createProfileInput', createProfileInput)
            const localVarPath = `/profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProfileInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Blocked Users
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockedUsersProfilesUsersUserIdBlocksGet: async (userId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getBlockedUsersProfilesUsersUserIdBlocksGet', 'userId', userId)
            const localVarPath = `/profiles/users/{user_id}/blocks/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Profile
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileProfilesUsersUserIdGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getProfileProfilesUsersUserIdGet', 'userId', userId)
            const localVarPath = `/profiles/users/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for profiles by first and last name. Supports partial matches and pagination.
         * @summary Search Profiles
         * @param {SearchProfilesInput} searchProfilesInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProfilesProfilesSearchPost: async (searchProfilesInput: SearchProfilesInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchProfilesInput' is not null or undefined
            assertParamExists('searchProfilesProfilesSearchPost', 'searchProfilesInput', searchProfilesInput)
            const localVarPath = `/profiles/search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchProfilesInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unblock User
         * @param {string} userId 
         * @param {string} blockedUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete: async (userId: string, blockedUserId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete', 'userId', userId)
            // verify required parameter 'blockedUserId' is not null or undefined
            assertParamExists('unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete', 'blockedUserId', blockedUserId)
            const localVarPath = `/profiles/users/{user_id}/blocks/{blocked_user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"blocked_user_id"}}`, encodeURIComponent(String(blockedUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Photo
         * @param {string} userId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhotoProfilesUsersUserIdPhotosPut: async (userId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updatePhotoProfilesUsersUserIdPhotosPut', 'userId', userId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('updatePhotoProfilesUsersUserIdPhotosPut', 'file', file)
            const localVarPath = `/profiles/users/{user_id}/photos/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Profile Links
         * @param {string} userId 
         * @param {UpdateProfileLinksInput} updateProfileLinksInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileLinksProfilesUsersUserIdLinksPut: async (userId: string, updateProfileLinksInput: UpdateProfileLinksInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateProfileLinksProfilesUsersUserIdLinksPut', 'userId', userId)
            // verify required parameter 'updateProfileLinksInput' is not null or undefined
            assertParamExists('updateProfileLinksProfilesUsersUserIdLinksPut', 'updateProfileLinksInput', updateProfileLinksInput)
            const localVarPath = `/profiles/users/{user_id}/links/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileLinksInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Profile
         * @param {UpdateProfileInput} updateProfileInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileProfilesPut: async (updateProfileInput: UpdateProfileInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProfileInput' is not null or undefined
            assertParamExists('updateProfileProfilesPut', 'updateProfileInput', updateProfileInput)
            const localVarPath = `/profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Video
         * @param {string} userId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVideoProfilesUsersUserIdVideosPut: async (userId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateVideoProfilesUsersUserIdVideosPut', 'userId', userId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('updateVideoProfilesUsersUserIdVideosPut', 'file', file)
            const localVarPath = `/profiles/users/{user_id}/videos/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Block User
         * @param {string} userId 
         * @param {BlockedUserInput} blockedUserInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockUserProfilesUsersUserIdBlocksPost(userId: string, blockedUserInput: BlockedUserInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockedUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockUserProfilesUsersUserIdBlocksPost(userId, blockedUserInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.blockUserProfilesUsersUserIdBlocksPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Bulk Get Profile
         * @param {BulkGetProfilesInput} bulkGetProfilesInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkGetProfileProfilesUsersBulkPost(bulkGetProfilesInput: BulkGetProfilesInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Profile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkGetProfileProfilesUsersBulkPost(bulkGetProfilesInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.bulkGetProfileProfilesUsersBulkPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Check If Blocked
         * @param {string} userId 
         * @param {string} blockedUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet(userId: string, blockedUserId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsBlockedOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet(userId, blockedUserId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Profile
         * @param {CreateProfileInput} createProfileInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProfileProfilesPost(createProfileInput: CreateProfileInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProfileProfilesPost(createProfileInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.createProfileProfilesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Blocked Users
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockedUsersProfilesUsersUserIdBlocksGet(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockedUsersPaginatorBlockedUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockedUsersProfilesUsersUserIdBlocksGet(userId, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.getBlockedUsersProfilesUsersUserIdBlocksGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Profile
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileProfilesUsersUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileProfilesUsersUserIdGet(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.getProfileProfilesUsersUserIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Search for profiles by first and last name. Supports partial matches and pagination.
         * @summary Search Profiles
         * @param {SearchProfilesInput} searchProfilesInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchProfilesProfilesSearchPost(searchProfilesInput: SearchProfilesInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileSearchPaginatorProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchProfilesProfilesSearchPost(searchProfilesInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.searchProfilesProfilesSearchPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Unblock User
         * @param {string} userId 
         * @param {string} blockedUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete(userId: string, blockedUserId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete(userId, blockedUserId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Photo
         * @param {string} userId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePhotoProfilesUsersUserIdPhotosPut(userId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePhotoProfilesUsersUserIdPhotosPut(userId, file, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.updatePhotoProfilesUsersUserIdPhotosPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Profile Links
         * @param {string} userId 
         * @param {UpdateProfileLinksInput} updateProfileLinksInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfileLinksProfilesUsersUserIdLinksPut(userId: string, updateProfileLinksInput: UpdateProfileLinksInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfileLinksProfilesUsersUserIdLinksPut(userId, updateProfileLinksInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.updateProfileLinksProfilesUsersUserIdLinksPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Profile
         * @param {UpdateProfileInput} updateProfileInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfileProfilesPut(updateProfileInput: UpdateProfileInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfileProfilesPut(updateProfileInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.updateProfileProfilesPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Video
         * @param {string} userId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVideoProfilesUsersUserIdVideosPut(userId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVideoProfilesUsersUserIdVideosPut(userId, file, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.updateVideoProfilesUsersUserIdVideosPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfilesApiFp(configuration)
    return {
        /**
         * 
         * @summary Block User
         * @param {ProfilesApiBlockUserProfilesUsersUserIdBlocksPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUserProfilesUsersUserIdBlocksPost(requestParameters: ProfilesApiBlockUserProfilesUsersUserIdBlocksPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<BlockedUser> {
            return localVarFp.blockUserProfilesUsersUserIdBlocksPost(requestParameters.userId, requestParameters.blockedUserInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bulk Get Profile
         * @param {ProfilesApiBulkGetProfileProfilesUsersBulkPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetProfileProfilesUsersBulkPost(requestParameters: ProfilesApiBulkGetProfileProfilesUsersBulkPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Profile>> {
            return localVarFp.bulkGetProfileProfilesUsersBulkPost(requestParameters.bulkGetProfilesInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check If Blocked
         * @param {ProfilesApiCheckIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet(requestParameters: ProfilesApiCheckIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<IsBlockedOutput> {
            return localVarFp.checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet(requestParameters.userId, requestParameters.blockedUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Profile
         * @param {ProfilesApiCreateProfileProfilesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfileProfilesPost(requestParameters: ProfilesApiCreateProfileProfilesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.createProfileProfilesPost(requestParameters.createProfileInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Blocked Users
         * @param {ProfilesApiGetBlockedUsersProfilesUsersUserIdBlocksGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockedUsersProfilesUsersUserIdBlocksGet(requestParameters: ProfilesApiGetBlockedUsersProfilesUsersUserIdBlocksGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BlockedUsersPaginatorBlockedUser> {
            return localVarFp.getBlockedUsersProfilesUsersUserIdBlocksGet(requestParameters.userId, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Profile
         * @param {ProfilesApiGetProfileProfilesUsersUserIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileProfilesUsersUserIdGet(requestParameters: ProfilesApiGetProfileProfilesUsersUserIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Profile> {
            return localVarFp.getProfileProfilesUsersUserIdGet(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for profiles by first and last name. Supports partial matches and pagination.
         * @summary Search Profiles
         * @param {ProfilesApiSearchProfilesProfilesSearchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProfilesProfilesSearchPost(requestParameters: ProfilesApiSearchProfilesProfilesSearchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileSearchPaginatorProfile> {
            return localVarFp.searchProfilesProfilesSearchPost(requestParameters.searchProfilesInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unblock User
         * @param {ProfilesApiUnblockUserProfilesUsersUserIdBlocksBlockedUserIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete(requestParameters: ProfilesApiUnblockUserProfilesUsersUserIdBlocksBlockedUserIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete(requestParameters.userId, requestParameters.blockedUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Photo
         * @param {ProfilesApiUpdatePhotoProfilesUsersUserIdPhotosPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhotoProfilesUsersUserIdPhotosPut(requestParameters: ProfilesApiUpdatePhotoProfilesUsersUserIdPhotosPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updatePhotoProfilesUsersUserIdPhotosPut(requestParameters.userId, requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Profile Links
         * @param {ProfilesApiUpdateProfileLinksProfilesUsersUserIdLinksPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileLinksProfilesUsersUserIdLinksPut(requestParameters: ProfilesApiUpdateProfileLinksProfilesUsersUserIdLinksPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateProfileLinksProfilesUsersUserIdLinksPut(requestParameters.userId, requestParameters.updateProfileLinksInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Profile
         * @param {ProfilesApiUpdateProfileProfilesPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileProfilesPut(requestParameters: ProfilesApiUpdateProfileProfilesPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateProfileProfilesPut(requestParameters.updateProfileInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Video
         * @param {ProfilesApiUpdateVideoProfilesUsersUserIdVideosPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVideoProfilesUsersUserIdVideosPut(requestParameters: ProfilesApiUpdateVideoProfilesUsersUserIdVideosPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateVideoProfilesUsersUserIdVideosPut(requestParameters.userId, requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for blockUserProfilesUsersUserIdBlocksPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiBlockUserProfilesUsersUserIdBlocksPostRequest
 */
export interface ProfilesApiBlockUserProfilesUsersUserIdBlocksPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiBlockUserProfilesUsersUserIdBlocksPost
     */
    readonly userId: string

    /**
     * 
     * @type {BlockedUserInput}
     * @memberof ProfilesApiBlockUserProfilesUsersUserIdBlocksPost
     */
    readonly blockedUserInput: BlockedUserInput
}

/**
 * Request parameters for bulkGetProfileProfilesUsersBulkPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiBulkGetProfileProfilesUsersBulkPostRequest
 */
export interface ProfilesApiBulkGetProfileProfilesUsersBulkPostRequest {
    /**
     * 
     * @type {BulkGetProfilesInput}
     * @memberof ProfilesApiBulkGetProfileProfilesUsersBulkPost
     */
    readonly bulkGetProfilesInput: BulkGetProfilesInput
}

/**
 * Request parameters for checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet operation in ProfilesApi.
 * @export
 * @interface ProfilesApiCheckIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGetRequest
 */
export interface ProfilesApiCheckIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiCheckIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProfilesApiCheckIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet
     */
    readonly blockedUserId: string
}

/**
 * Request parameters for createProfileProfilesPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiCreateProfileProfilesPostRequest
 */
export interface ProfilesApiCreateProfileProfilesPostRequest {
    /**
     * 
     * @type {CreateProfileInput}
     * @memberof ProfilesApiCreateProfileProfilesPost
     */
    readonly createProfileInput: CreateProfileInput
}

/**
 * Request parameters for getBlockedUsersProfilesUsersUserIdBlocksGet operation in ProfilesApi.
 * @export
 * @interface ProfilesApiGetBlockedUsersProfilesUsersUserIdBlocksGetRequest
 */
export interface ProfilesApiGetBlockedUsersProfilesUsersUserIdBlocksGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiGetBlockedUsersProfilesUsersUserIdBlocksGet
     */
    readonly userId: string

    /**
     * 
     * @type {number}
     * @memberof ProfilesApiGetBlockedUsersProfilesUsersUserIdBlocksGet
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof ProfilesApiGetBlockedUsersProfilesUsersUserIdBlocksGet
     */
    readonly offset?: number
}

/**
 * Request parameters for getProfileProfilesUsersUserIdGet operation in ProfilesApi.
 * @export
 * @interface ProfilesApiGetProfileProfilesUsersUserIdGetRequest
 */
export interface ProfilesApiGetProfileProfilesUsersUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiGetProfileProfilesUsersUserIdGet
     */
    readonly userId: string
}

/**
 * Request parameters for searchProfilesProfilesSearchPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiSearchProfilesProfilesSearchPostRequest
 */
export interface ProfilesApiSearchProfilesProfilesSearchPostRequest {
    /**
     * 
     * @type {SearchProfilesInput}
     * @memberof ProfilesApiSearchProfilesProfilesSearchPost
     */
    readonly searchProfilesInput: SearchProfilesInput
}

/**
 * Request parameters for unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete operation in ProfilesApi.
 * @export
 * @interface ProfilesApiUnblockUserProfilesUsersUserIdBlocksBlockedUserIdDeleteRequest
 */
export interface ProfilesApiUnblockUserProfilesUsersUserIdBlocksBlockedUserIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiUnblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete
     */
    readonly userId: string

    /**
     * 
     * @type {string}
     * @memberof ProfilesApiUnblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete
     */
    readonly blockedUserId: string
}

/**
 * Request parameters for updatePhotoProfilesUsersUserIdPhotosPut operation in ProfilesApi.
 * @export
 * @interface ProfilesApiUpdatePhotoProfilesUsersUserIdPhotosPutRequest
 */
export interface ProfilesApiUpdatePhotoProfilesUsersUserIdPhotosPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiUpdatePhotoProfilesUsersUserIdPhotosPut
     */
    readonly userId: string

    /**
     * 
     * @type {File}
     * @memberof ProfilesApiUpdatePhotoProfilesUsersUserIdPhotosPut
     */
    readonly file: File
}

/**
 * Request parameters for updateProfileLinksProfilesUsersUserIdLinksPut operation in ProfilesApi.
 * @export
 * @interface ProfilesApiUpdateProfileLinksProfilesUsersUserIdLinksPutRequest
 */
export interface ProfilesApiUpdateProfileLinksProfilesUsersUserIdLinksPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiUpdateProfileLinksProfilesUsersUserIdLinksPut
     */
    readonly userId: string

    /**
     * 
     * @type {UpdateProfileLinksInput}
     * @memberof ProfilesApiUpdateProfileLinksProfilesUsersUserIdLinksPut
     */
    readonly updateProfileLinksInput: UpdateProfileLinksInput
}

/**
 * Request parameters for updateProfileProfilesPut operation in ProfilesApi.
 * @export
 * @interface ProfilesApiUpdateProfileProfilesPutRequest
 */
export interface ProfilesApiUpdateProfileProfilesPutRequest {
    /**
     * 
     * @type {UpdateProfileInput}
     * @memberof ProfilesApiUpdateProfileProfilesPut
     */
    readonly updateProfileInput: UpdateProfileInput
}

/**
 * Request parameters for updateVideoProfilesUsersUserIdVideosPut operation in ProfilesApi.
 * @export
 * @interface ProfilesApiUpdateVideoProfilesUsersUserIdVideosPutRequest
 */
export interface ProfilesApiUpdateVideoProfilesUsersUserIdVideosPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiUpdateVideoProfilesUsersUserIdVideosPut
     */
    readonly userId: string

    /**
     * 
     * @type {File}
     * @memberof ProfilesApiUpdateVideoProfilesUsersUserIdVideosPut
     */
    readonly file: File
}

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     * 
     * @summary Block User
     * @param {ProfilesApiBlockUserProfilesUsersUserIdBlocksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public blockUserProfilesUsersUserIdBlocksPost(requestParameters: ProfilesApiBlockUserProfilesUsersUserIdBlocksPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).blockUserProfilesUsersUserIdBlocksPost(requestParameters.userId, requestParameters.blockedUserInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bulk Get Profile
     * @param {ProfilesApiBulkGetProfileProfilesUsersBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public bulkGetProfileProfilesUsersBulkPost(requestParameters: ProfilesApiBulkGetProfileProfilesUsersBulkPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).bulkGetProfileProfilesUsersBulkPost(requestParameters.bulkGetProfilesInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check If Blocked
     * @param {ProfilesApiCheckIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet(requestParameters: ProfilesApiCheckIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGetRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).checkIfBlockedProfilesUsersUserIdBlocksBlockedUserIdGet(requestParameters.userId, requestParameters.blockedUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Profile
     * @param {ProfilesApiCreateProfileProfilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public createProfileProfilesPost(requestParameters: ProfilesApiCreateProfileProfilesPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).createProfileProfilesPost(requestParameters.createProfileInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Blocked Users
     * @param {ProfilesApiGetBlockedUsersProfilesUsersUserIdBlocksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public getBlockedUsersProfilesUsersUserIdBlocksGet(requestParameters: ProfilesApiGetBlockedUsersProfilesUsersUserIdBlocksGetRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).getBlockedUsersProfilesUsersUserIdBlocksGet(requestParameters.userId, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Profile
     * @param {ProfilesApiGetProfileProfilesUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public getProfileProfilesUsersUserIdGet(requestParameters: ProfilesApiGetProfileProfilesUsersUserIdGetRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).getProfileProfilesUsersUserIdGet(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for profiles by first and last name. Supports partial matches and pagination.
     * @summary Search Profiles
     * @param {ProfilesApiSearchProfilesProfilesSearchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public searchProfilesProfilesSearchPost(requestParameters: ProfilesApiSearchProfilesProfilesSearchPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).searchProfilesProfilesSearchPost(requestParameters.searchProfilesInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unblock User
     * @param {ProfilesApiUnblockUserProfilesUsersUserIdBlocksBlockedUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete(requestParameters: ProfilesApiUnblockUserProfilesUsersUserIdBlocksBlockedUserIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).unblockUserProfilesUsersUserIdBlocksBlockedUserIdDelete(requestParameters.userId, requestParameters.blockedUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Photo
     * @param {ProfilesApiUpdatePhotoProfilesUsersUserIdPhotosPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public updatePhotoProfilesUsersUserIdPhotosPut(requestParameters: ProfilesApiUpdatePhotoProfilesUsersUserIdPhotosPutRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).updatePhotoProfilesUsersUserIdPhotosPut(requestParameters.userId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Profile Links
     * @param {ProfilesApiUpdateProfileLinksProfilesUsersUserIdLinksPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public updateProfileLinksProfilesUsersUserIdLinksPut(requestParameters: ProfilesApiUpdateProfileLinksProfilesUsersUserIdLinksPutRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).updateProfileLinksProfilesUsersUserIdLinksPut(requestParameters.userId, requestParameters.updateProfileLinksInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Profile
     * @param {ProfilesApiUpdateProfileProfilesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public updateProfileProfilesPut(requestParameters: ProfilesApiUpdateProfileProfilesPutRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).updateProfileProfilesPut(requestParameters.updateProfileInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Video
     * @param {ProfilesApiUpdateVideoProfilesUsersUserIdVideosPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public updateVideoProfilesUsersUserIdVideosPut(requestParameters: ProfilesApiUpdateVideoProfilesUsersUserIdVideosPutRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).updateVideoProfilesUsersUserIdVideosPut(requestParameters.userId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Health check endpoint for AWS load balancers and monitoring
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Health check endpoint for AWS load balancers and monitoring
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckHealthGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SystemApi.healthCheckHealthGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * Health check endpoint for AWS load balancers and monitoring
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Health check endpoint for AWS load balancers and monitoring
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public healthCheckHealthGet(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



