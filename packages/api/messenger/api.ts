/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const ConnectionType = {
    Connected: 'connected',
    Introduced: 'introduced',
    All: 'all'
} as const;

export type ConnectionType = typeof ConnectionType[keyof typeof ConnectionType];


/**
 * Document Mapping class.  Fields:  - `id` - MongoDB document ObjectID \"_id\" field. Mapped to the PydanticObjectId class
 * @export
 * @interface Conversation
 */
export interface Conversation {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Conversation
     */
    'id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Conversation
     */
    'users': Array<string>;
    /**
     * 
     * @type {ConversationType}
     * @memberof Conversation
     */
    'conversation_type': ConversationType;
    /**
     * 
     * @type {boolean}
     * @memberof Conversation
     */
    'is_active'?: boolean;
}


/**
 * Document Mapping class for a conversation. This includes details such as the unique identifier, users involved, type of conversation, and its active status.
 * @export
 * @interface ConversationSchema
 */
export interface ConversationSchema {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof ConversationSchema
     */
    '_id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConversationSchema
     */
    'users': Array<string>;
    /**
     * 
     * @type {ConversationType}
     * @memberof ConversationSchema
     */
    'conversation_type': ConversationType;
    /**
     * 
     * @type {boolean}
     * @memberof ConversationSchema
     */
    'is_active'?: boolean;
}


/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const ConversationType = {
    DirectMessage: 'direct_message',
    PublicRoom: 'public_room',
    PrivateRoom: 'private_room'
} as const;

export type ConversationType = typeof ConversationType[keyof typeof ConversationType];


/**
 * 
 * @export
 * @interface CreateConversationInput
 */
export interface CreateConversationInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof CreateConversationInput
     */
    'user_id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateConversationInput
     */
    'users': Array<string>;
    /**
     * 
     * @type {ConversationType}
     * @memberof CreateConversationInput
     */
    'conversation_type': ConversationType;
}


/**
 * 
 * @export
 * @interface CreateMessageInput
 */
export interface CreateMessageInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof CreateMessageInput
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageInput
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface InboxConversation
 */
export interface InboxConversation {
    /**
     * 
     * @type {ConversationSchema}
     * @memberof InboxConversation
     */
    'conversation': ConversationSchema;
    /**
     * 
     * @type {MessageSchema}
     * @memberof InboxConversation
     */
    'last_message'?: MessageSchema;
    /**
     * 
     * @type {UnreadWithCount}
     * @memberof InboxConversation
     */
    'unread': UnreadWithCount;
}
/**
 * 
 * @export
 * @interface JoinConversationInput
 */
export interface JoinConversationInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof JoinConversationInput
     */
    'user_id': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof JoinConversationInput
     */
    'conversation_id': string;
}
/**
 * 
 * @export
 * @interface LimitOffsetPaginatorConversation
 */
export interface LimitOffsetPaginatorConversation {
    /**
     * 
     * @type {number}
     * @memberof LimitOffsetPaginatorConversation
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof LimitOffsetPaginatorConversation
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof LimitOffsetPaginatorConversation
     */
    'limit': number;
    /**
     * 
     * @type {Array<Conversation>}
     * @memberof LimitOffsetPaginatorConversation
     */
    'results': Array<Conversation>;
    /**
     * 
     * @type {string}
     * @memberof LimitOffsetPaginatorConversation
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitOffsetPaginatorConversation
     */
    'previous'?: string;
}
/**
 * 
 * @export
 * @interface LimitOffsetPaginatorInboxConversation
 */
export interface LimitOffsetPaginatorInboxConversation {
    /**
     * 
     * @type {number}
     * @memberof LimitOffsetPaginatorInboxConversation
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof LimitOffsetPaginatorInboxConversation
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof LimitOffsetPaginatorInboxConversation
     */
    'limit': number;
    /**
     * 
     * @type {Array<InboxConversation>}
     * @memberof LimitOffsetPaginatorInboxConversation
     */
    'results': Array<InboxConversation>;
    /**
     * 
     * @type {string}
     * @memberof LimitOffsetPaginatorInboxConversation
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitOffsetPaginatorInboxConversation
     */
    'previous'?: string;
}
/**
 * 
 * @export
 * @interface LimitOffsetPaginatorMessage
 */
export interface LimitOffsetPaginatorMessage {
    /**
     * 
     * @type {number}
     * @memberof LimitOffsetPaginatorMessage
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof LimitOffsetPaginatorMessage
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof LimitOffsetPaginatorMessage
     */
    'limit': number;
    /**
     * 
     * @type {Array<Message>}
     * @memberof LimitOffsetPaginatorMessage
     */
    'results': Array<Message>;
    /**
     * 
     * @type {string}
     * @memberof LimitOffsetPaginatorMessage
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitOffsetPaginatorMessage
     */
    'previous'?: string;
}
/**
 * Document Mapping class.  Fields:  - `id` - MongoDB document ObjectID \"_id\" field. Mapped to the PydanticObjectId class
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Message
     */
    '_id'?: string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Message
     */
    'conversation_id': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Message
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface MessageSchema
 */
export interface MessageSchema {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof MessageSchema
     */
    '_id'?: string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof MessageSchema
     */
    'conversation_id': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof MessageSchema
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageSchema
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof MessageSchema
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface ReportMessageInput
 */
export interface ReportMessageInput {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof ReportMessageInput
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface TotalUnreadCountOutput
 */
export interface TotalUnreadCountOutput {
    /**
     * 
     * @type {number}
     * @memberof TotalUnreadCountOutput
     */
    'count': number;
}
/**
 * Document Mapping class.  Fields:  - `id` - MongoDB document ObjectID \"_id\" field. Mapped to the PydanticObjectId class
 * @export
 * @interface Unread
 */
export interface Unread {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Unread
     */
    '_id'?: string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Unread
     */
    'conversation_id': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Unread
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof Unread
     */
    'last_read_time': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof Unread
     */
    'last_read_message_id'?: string;
}
/**
 * 
 * @export
 * @interface UnreadWithCount
 */
export interface UnreadWithCount {
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof UnreadWithCount
     */
    'id'?: string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof UnreadWithCount
     */
    'conversation_id': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof UnreadWithCount
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof UnreadWithCount
     */
    'last_read_time': string;
    /**
     * A unique identifier (UUID) in hexadecimal format
     * @type {string}
     * @memberof UnreadWithCount
     */
    'last_read_message_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof UnreadWithCount
     */
    'unread_count': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * ConversationsApi - axios parameter creator
 * @export
 */
export const ConversationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Conversation
         * @param {CreateConversationInput} createConversationInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversationConversationsPost: async (createConversationInput: CreateConversationInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createConversationInput' is not null or undefined
            assertParamExists('createConversationConversationsPost', 'createConversationInput', createConversationInput)
            const localVarPath = `/conversations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createConversationInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Conversation Unread
         * @param {Unread} unread 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversationUnreadConversationsUnreadsPost: async (unread: Unread, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unread' is not null or undefined
            assertParamExists('createConversationUnreadConversationsUnreadsPost', 'unread', unread)
            const localVarPath = `/conversations/unreads/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unread, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Conversations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConversationsConversationsAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/conversations/all/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Conversation By User Ids
         * @param {Array<string>} userIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationByUserIdsConversationsUsersGet: async (userIds: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIds' is not null or undefined
            assertParamExists('getConversationByUserIdsConversationsUsersGet', 'userIds', userIds)
            const localVarPath = `/conversations/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userIds) {
                localVarQueryParameter['user_ids'] = userIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Conversation
         * @param {string} conversationId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationConversationsConversationIdUsersUserIdGet: async (conversationId: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('getConversationConversationsConversationIdUsersUserIdGet', 'conversationId', conversationId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getConversationConversationsConversationIdUsersUserIdGet', 'userId', userId)
            const localVarPath = `/conversations/{conversation_id}/users/{user_id}/`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Conversation Unread
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationUnreadConversationsConversationIdUnreadsGet: async (conversationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('getConversationUnreadConversationsConversationIdUnreadsGet', 'conversationId', conversationId)
            const localVarPath = `/conversations/{conversation_id}/unreads/`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Conversations
         * @param {ConversationType} conversationType 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsConversationsGet: async (conversationType: ConversationType, offset?: number, limit?: number, isActive?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationType' is not null or undefined
            assertParamExists('getConversationsConversationsGet', 'conversationType', conversationType)
            const localVarPath = `/conversations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (conversationType !== undefined) {
                localVarQueryParameter['conversation_type'] = conversationType;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Direct Message Conversations
         * @param {string} userId 
         * @param {ConnectionType} connectionType 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet: async (userId: string, connectionType: ConnectionType, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet', 'userId', userId)
            // verify required parameter 'connectionType' is not null or undefined
            assertParamExists('getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet', 'connectionType', connectionType)
            const localVarPath = `/conversations/users/{user_id}/direct-messages/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (connectionType !== undefined) {
                localVarQueryParameter['connection_type'] = connectionType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Messages
         * @param {string} conversationId 
         * @param {boolean} [hideReported] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesConversationsConversationIdMessagesGet: async (conversationId: string, hideReported?: boolean, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('getMessagesConversationsConversationIdMessagesGet', 'conversationId', conversationId)
            const localVarPath = `/conversations/{conversation_id}/messages/`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (hideReported !== undefined) {
                localVarQueryParameter['hide_reported'] = hideReported;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Total Unread Count
         * @param {string} userId 
         * @param {ConnectionType} connectionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet: async (userId: string, connectionType: ConnectionType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet', 'userId', userId)
            // verify required parameter 'connectionType' is not null or undefined
            assertParamExists('getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet', 'connectionType', connectionType)
            const localVarPath = `/conversations/users/{user_id}/unreads/count/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (connectionType !== undefined) {
                localVarQueryParameter['connection_type'] = connectionType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join Conversation
         * @param {JoinConversationInput} joinConversationInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinConversationConversationsJoinPost: async (joinConversationInput: JoinConversationInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'joinConversationInput' is not null or undefined
            assertParamExists('joinConversationConversationsJoinPost', 'joinConversationInput', joinConversationInput)
            const localVarPath = `/conversations/join/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinConversationInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark Conversation Read
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markConversationReadConversationsConversationIdMessagesReadPut: async (conversationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('markConversationReadConversationsConversationIdMessagesReadPut', 'conversationId', conversationId)
            const localVarPath = `/conversations/{conversation_id}/messages/read/`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report Message
         * @param {string} messageId 
         * @param {ReportMessageInput} reportMessageInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportMessageConversationsMessagesMessageIdReportPost: async (messageId: string, reportMessageInput: ReportMessageInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('reportMessageConversationsMessagesMessageIdReportPost', 'messageId', messageId)
            // verify required parameter 'reportMessageInput' is not null or undefined
            assertParamExists('reportMessageConversationsMessagesMessageIdReportPost', 'reportMessageInput', reportMessageInput)
            const localVarPath = `/conversations/messages/{message_id}/report/`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportMessageInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send Message
         * @param {string} conversationId 
         * @param {CreateMessageInput} createMessageInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessageConversationsConversationIdMessagesPost: async (conversationId: string, createMessageInput: CreateMessageInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('sendMessageConversationsConversationIdMessagesPost', 'conversationId', conversationId)
            // verify required parameter 'createMessageInput' is not null or undefined
            assertParamExists('sendMessageConversationsConversationIdMessagesPost', 'createMessageInput', createMessageInput)
            const localVarPath = `/conversations/{conversation_id}/messages/`
                .replace(`{${"conversation_id"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConversationsApi - functional programming interface
 * @export
 */
export const ConversationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConversationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Conversation
         * @param {CreateConversationInput} createConversationInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConversationConversationsPost(createConversationInput: CreateConversationInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Conversation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConversationConversationsPost(createConversationInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.createConversationConversationsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Conversation Unread
         * @param {Unread} unread 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConversationUnreadConversationsUnreadsPost(unread: Unread, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Unread>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConversationUnreadConversationsUnreadsPost(unread, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.createConversationUnreadConversationsUnreadsPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Conversations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllConversationsConversationsAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Conversation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllConversationsConversationsAllGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.getAllConversationsConversationsAllGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Conversation By User Ids
         * @param {Array<string>} userIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationByUserIdsConversationsUsersGet(userIds: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Conversation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationByUserIdsConversationsUsersGet(userIds, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.getConversationByUserIdsConversationsUsersGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Conversation
         * @param {string} conversationId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationConversationsConversationIdUsersUserIdGet(conversationId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Conversation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationConversationsConversationIdUsersUserIdGet(conversationId, userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.getConversationConversationsConversationIdUsersUserIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Conversation Unread
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationUnreadConversationsConversationIdUnreadsGet(conversationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnreadWithCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationUnreadConversationsConversationIdUnreadsGet(conversationId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.getConversationUnreadConversationsConversationIdUnreadsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Conversations
         * @param {ConversationType} conversationType 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationsConversationsGet(conversationType: ConversationType, offset?: number, limit?: number, isActive?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LimitOffsetPaginatorConversation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationsConversationsGet(conversationType, offset, limit, isActive, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.getConversationsConversationsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Direct Message Conversations
         * @param {string} userId 
         * @param {ConnectionType} connectionType 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet(userId: string, connectionType: ConnectionType, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LimitOffsetPaginatorConversation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet(userId, connectionType, offset, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Messages
         * @param {string} conversationId 
         * @param {boolean} [hideReported] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessagesConversationsConversationIdMessagesGet(conversationId: string, hideReported?: boolean, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LimitOffsetPaginatorMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessagesConversationsConversationIdMessagesGet(conversationId, hideReported, offset, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.getMessagesConversationsConversationIdMessagesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Total Unread Count
         * @param {string} userId 
         * @param {ConnectionType} connectionType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet(userId: string, connectionType: ConnectionType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TotalUnreadCountOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet(userId, connectionType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Join Conversation
         * @param {JoinConversationInput} joinConversationInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinConversationConversationsJoinPost(joinConversationInput: JoinConversationInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinConversationConversationsJoinPost(joinConversationInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.joinConversationConversationsJoinPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Mark Conversation Read
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markConversationReadConversationsConversationIdMessagesReadPut(conversationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markConversationReadConversationsConversationIdMessagesReadPut(conversationId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.markConversationReadConversationsConversationIdMessagesReadPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Report Message
         * @param {string} messageId 
         * @param {ReportMessageInput} reportMessageInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportMessageConversationsMessagesMessageIdReportPost(messageId: string, reportMessageInput: ReportMessageInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportMessageConversationsMessagesMessageIdReportPost(messageId, reportMessageInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.reportMessageConversationsMessagesMessageIdReportPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Send Message
         * @param {string} conversationId 
         * @param {CreateMessageInput} createMessageInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessageConversationsConversationIdMessagesPost(conversationId: string, createMessageInput: CreateMessageInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessageConversationsConversationIdMessagesPost(conversationId, createMessageInput, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConversationsApi.sendMessageConversationsConversationIdMessagesPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ConversationsApi - factory interface
 * @export
 */
export const ConversationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConversationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Conversation
         * @param {ConversationsApiCreateConversationConversationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversationConversationsPost(requestParameters: ConversationsApiCreateConversationConversationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Conversation> {
            return localVarFp.createConversationConversationsPost(requestParameters.createConversationInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Conversation Unread
         * @param {ConversationsApiCreateConversationUnreadConversationsUnreadsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversationUnreadConversationsUnreadsPost(requestParameters: ConversationsApiCreateConversationUnreadConversationsUnreadsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Unread> {
            return localVarFp.createConversationUnreadConversationsUnreadsPost(requestParameters.unread, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Conversations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConversationsConversationsAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Conversation>> {
            return localVarFp.getAllConversationsConversationsAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Conversation By User Ids
         * @param {ConversationsApiGetConversationByUserIdsConversationsUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationByUserIdsConversationsUsersGet(requestParameters: ConversationsApiGetConversationByUserIdsConversationsUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Conversation> {
            return localVarFp.getConversationByUserIdsConversationsUsersGet(requestParameters.userIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Conversation
         * @param {ConversationsApiGetConversationConversationsConversationIdUsersUserIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationConversationsConversationIdUsersUserIdGet(requestParameters: ConversationsApiGetConversationConversationsConversationIdUsersUserIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Conversation> {
            return localVarFp.getConversationConversationsConversationIdUsersUserIdGet(requestParameters.conversationId, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Conversation Unread
         * @param {ConversationsApiGetConversationUnreadConversationsConversationIdUnreadsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationUnreadConversationsConversationIdUnreadsGet(requestParameters: ConversationsApiGetConversationUnreadConversationsConversationIdUnreadsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnreadWithCount> {
            return localVarFp.getConversationUnreadConversationsConversationIdUnreadsGet(requestParameters.conversationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Conversations
         * @param {ConversationsApiGetConversationsConversationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsConversationsGet(requestParameters: ConversationsApiGetConversationsConversationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LimitOffsetPaginatorConversation> {
            return localVarFp.getConversationsConversationsGet(requestParameters.conversationType, requestParameters.offset, requestParameters.limit, requestParameters.isActive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Direct Message Conversations
         * @param {ConversationsApiGetDirectMessageConversationsConversationsUsersUserIdDirectMessagesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet(requestParameters: ConversationsApiGetDirectMessageConversationsConversationsUsersUserIdDirectMessagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LimitOffsetPaginatorConversation> {
            return localVarFp.getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet(requestParameters.userId, requestParameters.connectionType, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Messages
         * @param {ConversationsApiGetMessagesConversationsConversationIdMessagesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesConversationsConversationIdMessagesGet(requestParameters: ConversationsApiGetMessagesConversationsConversationIdMessagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LimitOffsetPaginatorMessage> {
            return localVarFp.getMessagesConversationsConversationIdMessagesGet(requestParameters.conversationId, requestParameters.hideReported, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Total Unread Count
         * @param {ConversationsApiGetTotalUnreadCountConversationsUsersUserIdUnreadsCountGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet(requestParameters: ConversationsApiGetTotalUnreadCountConversationsUsersUserIdUnreadsCountGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TotalUnreadCountOutput> {
            return localVarFp.getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet(requestParameters.userId, requestParameters.connectionType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Join Conversation
         * @param {ConversationsApiJoinConversationConversationsJoinPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinConversationConversationsJoinPost(requestParameters: ConversationsApiJoinConversationConversationsJoinPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.joinConversationConversationsJoinPost(requestParameters.joinConversationInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark Conversation Read
         * @param {ConversationsApiMarkConversationReadConversationsConversationIdMessagesReadPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markConversationReadConversationsConversationIdMessagesReadPut(requestParameters: ConversationsApiMarkConversationReadConversationsConversationIdMessagesReadPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.markConversationReadConversationsConversationIdMessagesReadPut(requestParameters.conversationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report Message
         * @param {ConversationsApiReportMessageConversationsMessagesMessageIdReportPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportMessageConversationsMessagesMessageIdReportPost(requestParameters: ConversationsApiReportMessageConversationsMessagesMessageIdReportPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Message> {
            return localVarFp.reportMessageConversationsMessagesMessageIdReportPost(requestParameters.messageId, requestParameters.reportMessageInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send Message
         * @param {ConversationsApiSendMessageConversationsConversationIdMessagesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessageConversationsConversationIdMessagesPost(requestParameters: ConversationsApiSendMessageConversationsConversationIdMessagesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Message> {
            return localVarFp.sendMessageConversationsConversationIdMessagesPost(requestParameters.conversationId, requestParameters.createMessageInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createConversationConversationsPost operation in ConversationsApi.
 * @export
 * @interface ConversationsApiCreateConversationConversationsPostRequest
 */
export interface ConversationsApiCreateConversationConversationsPostRequest {
    /**
     * 
     * @type {CreateConversationInput}
     * @memberof ConversationsApiCreateConversationConversationsPost
     */
    readonly createConversationInput: CreateConversationInput
}

/**
 * Request parameters for createConversationUnreadConversationsUnreadsPost operation in ConversationsApi.
 * @export
 * @interface ConversationsApiCreateConversationUnreadConversationsUnreadsPostRequest
 */
export interface ConversationsApiCreateConversationUnreadConversationsUnreadsPostRequest {
    /**
     * 
     * @type {Unread}
     * @memberof ConversationsApiCreateConversationUnreadConversationsUnreadsPost
     */
    readonly unread: Unread
}

/**
 * Request parameters for getConversationByUserIdsConversationsUsersGet operation in ConversationsApi.
 * @export
 * @interface ConversationsApiGetConversationByUserIdsConversationsUsersGetRequest
 */
export interface ConversationsApiGetConversationByUserIdsConversationsUsersGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ConversationsApiGetConversationByUserIdsConversationsUsersGet
     */
    readonly userIds: Array<string>
}

/**
 * Request parameters for getConversationConversationsConversationIdUsersUserIdGet operation in ConversationsApi.
 * @export
 * @interface ConversationsApiGetConversationConversationsConversationIdUsersUserIdGetRequest
 */
export interface ConversationsApiGetConversationConversationsConversationIdUsersUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConversationsApiGetConversationConversationsConversationIdUsersUserIdGet
     */
    readonly conversationId: string

    /**
     * 
     * @type {string}
     * @memberof ConversationsApiGetConversationConversationsConversationIdUsersUserIdGet
     */
    readonly userId: string
}

/**
 * Request parameters for getConversationUnreadConversationsConversationIdUnreadsGet operation in ConversationsApi.
 * @export
 * @interface ConversationsApiGetConversationUnreadConversationsConversationIdUnreadsGetRequest
 */
export interface ConversationsApiGetConversationUnreadConversationsConversationIdUnreadsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConversationsApiGetConversationUnreadConversationsConversationIdUnreadsGet
     */
    readonly conversationId: string
}

/**
 * Request parameters for getConversationsConversationsGet operation in ConversationsApi.
 * @export
 * @interface ConversationsApiGetConversationsConversationsGetRequest
 */
export interface ConversationsApiGetConversationsConversationsGetRequest {
    /**
     * 
     * @type {ConversationType}
     * @memberof ConversationsApiGetConversationsConversationsGet
     */
    readonly conversationType: ConversationType

    /**
     * 
     * @type {number}
     * @memberof ConversationsApiGetConversationsConversationsGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof ConversationsApiGetConversationsConversationsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {boolean}
     * @memberof ConversationsApiGetConversationsConversationsGet
     */
    readonly isActive?: boolean
}

/**
 * Request parameters for getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet operation in ConversationsApi.
 * @export
 * @interface ConversationsApiGetDirectMessageConversationsConversationsUsersUserIdDirectMessagesGetRequest
 */
export interface ConversationsApiGetDirectMessageConversationsConversationsUsersUserIdDirectMessagesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConversationsApiGetDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet
     */
    readonly userId: string

    /**
     * 
     * @type {ConnectionType}
     * @memberof ConversationsApiGetDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet
     */
    readonly connectionType: ConnectionType

    /**
     * 
     * @type {number}
     * @memberof ConversationsApiGetDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof ConversationsApiGetDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet
     */
    readonly limit?: number
}

/**
 * Request parameters for getMessagesConversationsConversationIdMessagesGet operation in ConversationsApi.
 * @export
 * @interface ConversationsApiGetMessagesConversationsConversationIdMessagesGetRequest
 */
export interface ConversationsApiGetMessagesConversationsConversationIdMessagesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConversationsApiGetMessagesConversationsConversationIdMessagesGet
     */
    readonly conversationId: string

    /**
     * 
     * @type {boolean}
     * @memberof ConversationsApiGetMessagesConversationsConversationIdMessagesGet
     */
    readonly hideReported?: boolean

    /**
     * 
     * @type {number}
     * @memberof ConversationsApiGetMessagesConversationsConversationIdMessagesGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof ConversationsApiGetMessagesConversationsConversationIdMessagesGet
     */
    readonly limit?: number
}

/**
 * Request parameters for getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet operation in ConversationsApi.
 * @export
 * @interface ConversationsApiGetTotalUnreadCountConversationsUsersUserIdUnreadsCountGetRequest
 */
export interface ConversationsApiGetTotalUnreadCountConversationsUsersUserIdUnreadsCountGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConversationsApiGetTotalUnreadCountConversationsUsersUserIdUnreadsCountGet
     */
    readonly userId: string

    /**
     * 
     * @type {ConnectionType}
     * @memberof ConversationsApiGetTotalUnreadCountConversationsUsersUserIdUnreadsCountGet
     */
    readonly connectionType: ConnectionType
}

/**
 * Request parameters for joinConversationConversationsJoinPost operation in ConversationsApi.
 * @export
 * @interface ConversationsApiJoinConversationConversationsJoinPostRequest
 */
export interface ConversationsApiJoinConversationConversationsJoinPostRequest {
    /**
     * 
     * @type {JoinConversationInput}
     * @memberof ConversationsApiJoinConversationConversationsJoinPost
     */
    readonly joinConversationInput: JoinConversationInput
}

/**
 * Request parameters for markConversationReadConversationsConversationIdMessagesReadPut operation in ConversationsApi.
 * @export
 * @interface ConversationsApiMarkConversationReadConversationsConversationIdMessagesReadPutRequest
 */
export interface ConversationsApiMarkConversationReadConversationsConversationIdMessagesReadPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ConversationsApiMarkConversationReadConversationsConversationIdMessagesReadPut
     */
    readonly conversationId: string
}

/**
 * Request parameters for reportMessageConversationsMessagesMessageIdReportPost operation in ConversationsApi.
 * @export
 * @interface ConversationsApiReportMessageConversationsMessagesMessageIdReportPostRequest
 */
export interface ConversationsApiReportMessageConversationsMessagesMessageIdReportPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ConversationsApiReportMessageConversationsMessagesMessageIdReportPost
     */
    readonly messageId: string

    /**
     * 
     * @type {ReportMessageInput}
     * @memberof ConversationsApiReportMessageConversationsMessagesMessageIdReportPost
     */
    readonly reportMessageInput: ReportMessageInput
}

/**
 * Request parameters for sendMessageConversationsConversationIdMessagesPost operation in ConversationsApi.
 * @export
 * @interface ConversationsApiSendMessageConversationsConversationIdMessagesPostRequest
 */
export interface ConversationsApiSendMessageConversationsConversationIdMessagesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ConversationsApiSendMessageConversationsConversationIdMessagesPost
     */
    readonly conversationId: string

    /**
     * 
     * @type {CreateMessageInput}
     * @memberof ConversationsApiSendMessageConversationsConversationIdMessagesPost
     */
    readonly createMessageInput: CreateMessageInput
}

/**
 * ConversationsApi - object-oriented interface
 * @export
 * @class ConversationsApi
 * @extends {BaseAPI}
 */
export class ConversationsApi extends BaseAPI {
    /**
     * 
     * @summary Create Conversation
     * @param {ConversationsApiCreateConversationConversationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public createConversationConversationsPost(requestParameters: ConversationsApiCreateConversationConversationsPostRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).createConversationConversationsPost(requestParameters.createConversationInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Conversation Unread
     * @param {ConversationsApiCreateConversationUnreadConversationsUnreadsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public createConversationUnreadConversationsUnreadsPost(requestParameters: ConversationsApiCreateConversationUnreadConversationsUnreadsPostRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).createConversationUnreadConversationsUnreadsPost(requestParameters.unread, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getAllConversationsConversationsAllGet(options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getAllConversationsConversationsAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Conversation By User Ids
     * @param {ConversationsApiGetConversationByUserIdsConversationsUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getConversationByUserIdsConversationsUsersGet(requestParameters: ConversationsApiGetConversationByUserIdsConversationsUsersGetRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getConversationByUserIdsConversationsUsersGet(requestParameters.userIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Conversation
     * @param {ConversationsApiGetConversationConversationsConversationIdUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getConversationConversationsConversationIdUsersUserIdGet(requestParameters: ConversationsApiGetConversationConversationsConversationIdUsersUserIdGetRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getConversationConversationsConversationIdUsersUserIdGet(requestParameters.conversationId, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Conversation Unread
     * @param {ConversationsApiGetConversationUnreadConversationsConversationIdUnreadsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getConversationUnreadConversationsConversationIdUnreadsGet(requestParameters: ConversationsApiGetConversationUnreadConversationsConversationIdUnreadsGetRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getConversationUnreadConversationsConversationIdUnreadsGet(requestParameters.conversationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Conversations
     * @param {ConversationsApiGetConversationsConversationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getConversationsConversationsGet(requestParameters: ConversationsApiGetConversationsConversationsGetRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getConversationsConversationsGet(requestParameters.conversationType, requestParameters.offset, requestParameters.limit, requestParameters.isActive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Direct Message Conversations
     * @param {ConversationsApiGetDirectMessageConversationsConversationsUsersUserIdDirectMessagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet(requestParameters: ConversationsApiGetDirectMessageConversationsConversationsUsersUserIdDirectMessagesGetRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getDirectMessageConversationsConversationsUsersUserIdDirectMessagesGet(requestParameters.userId, requestParameters.connectionType, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Messages
     * @param {ConversationsApiGetMessagesConversationsConversationIdMessagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getMessagesConversationsConversationIdMessagesGet(requestParameters: ConversationsApiGetMessagesConversationsConversationIdMessagesGetRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getMessagesConversationsConversationIdMessagesGet(requestParameters.conversationId, requestParameters.hideReported, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Total Unread Count
     * @param {ConversationsApiGetTotalUnreadCountConversationsUsersUserIdUnreadsCountGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet(requestParameters: ConversationsApiGetTotalUnreadCountConversationsUsersUserIdUnreadsCountGetRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).getTotalUnreadCountConversationsUsersUserIdUnreadsCountGet(requestParameters.userId, requestParameters.connectionType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Join Conversation
     * @param {ConversationsApiJoinConversationConversationsJoinPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public joinConversationConversationsJoinPost(requestParameters: ConversationsApiJoinConversationConversationsJoinPostRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).joinConversationConversationsJoinPost(requestParameters.joinConversationInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark Conversation Read
     * @param {ConversationsApiMarkConversationReadConversationsConversationIdMessagesReadPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public markConversationReadConversationsConversationIdMessagesReadPut(requestParameters: ConversationsApiMarkConversationReadConversationsConversationIdMessagesReadPutRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).markConversationReadConversationsConversationIdMessagesReadPut(requestParameters.conversationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report Message
     * @param {ConversationsApiReportMessageConversationsMessagesMessageIdReportPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public reportMessageConversationsMessagesMessageIdReportPost(requestParameters: ConversationsApiReportMessageConversationsMessagesMessageIdReportPostRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).reportMessageConversationsMessagesMessageIdReportPost(requestParameters.messageId, requestParameters.reportMessageInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send Message
     * @param {ConversationsApiSendMessageConversationsConversationIdMessagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    public sendMessageConversationsConversationIdMessagesPost(requestParameters: ConversationsApiSendMessageConversationsConversationIdMessagesPostRequest, options?: RawAxiosRequestConfig) {
        return ConversationsApiFp(this.configuration).sendMessageConversationsConversationIdMessagesPost(requestParameters.conversationId, requestParameters.createMessageInput, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InboxApi - axios parameter creator
 * @export
 */
export const InboxApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Inbox
         * @param {string} userId 
         * @param {ConnectionType} connectionType 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboxInboxGet: async (userId: string, connectionType: ConnectionType, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getInboxInboxGet', 'userId', userId)
            // verify required parameter 'connectionType' is not null or undefined
            assertParamExists('getInboxInboxGet', 'connectionType', connectionType)
            const localVarPath = `/inbox/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (connectionType !== undefined) {
                localVarQueryParameter['connection_type'] = connectionType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InboxApi - functional programming interface
 * @export
 */
export const InboxApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InboxApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Inbox
         * @param {string} userId 
         * @param {ConnectionType} connectionType 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboxInboxGet(userId: string, connectionType: ConnectionType, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LimitOffsetPaginatorInboxConversation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboxInboxGet(userId, connectionType, offset, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['InboxApi.getInboxInboxGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * InboxApi - factory interface
 * @export
 */
export const InboxApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InboxApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Inbox
         * @param {InboxApiGetInboxInboxGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboxInboxGet(requestParameters: InboxApiGetInboxInboxGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LimitOffsetPaginatorInboxConversation> {
            return localVarFp.getInboxInboxGet(requestParameters.userId, requestParameters.connectionType, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInboxInboxGet operation in InboxApi.
 * @export
 * @interface InboxApiGetInboxInboxGetRequest
 */
export interface InboxApiGetInboxInboxGetRequest {
    /**
     * 
     * @type {string}
     * @memberof InboxApiGetInboxInboxGet
     */
    readonly userId: string

    /**
     * 
     * @type {ConnectionType}
     * @memberof InboxApiGetInboxInboxGet
     */
    readonly connectionType: ConnectionType

    /**
     * 
     * @type {number}
     * @memberof InboxApiGetInboxInboxGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof InboxApiGetInboxInboxGet
     */
    readonly limit?: number
}

/**
 * InboxApi - object-oriented interface
 * @export
 * @class InboxApi
 * @extends {BaseAPI}
 */
export class InboxApi extends BaseAPI {
    /**
     * 
     * @summary Get Inbox
     * @param {InboxApiGetInboxInboxGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboxApi
     */
    public getInboxInboxGet(requestParameters: InboxApiGetInboxInboxGetRequest, options?: RawAxiosRequestConfig) {
        return InboxApiFp(this.configuration).getInboxInboxGet(requestParameters.userId, requestParameters.connectionType, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Health check endpoint for AWS load balancers and monitoring
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Health check endpoint for AWS load balancers and monitoring
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckHealthGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SystemApi.healthCheckHealthGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * Health check endpoint for AWS load balancers and monitoring
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Health check endpoint for AWS load balancers and monitoring
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public healthCheckHealthGet(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



